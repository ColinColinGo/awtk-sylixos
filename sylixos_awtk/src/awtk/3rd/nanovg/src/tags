!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APREC	fontstash.h	/^#define APREC /;"	d
CASE	stb_image.h	/^         #define CASE(/;"	d
CASE	stb_image.h	/^         #undef CASE$/;"	d
CASE	stb_image.h	/^      #define CASE(/;"	d
CASE	stb_image.h	/^      #undef CASE$/;"	d
COMBO	stb_image.h	/^      #define COMBO(/;"	d
FAST_BITS	stb_image.h	/^#define FAST_BITS /;"	d
FONS_ALIGN_BASELINE	fontstash.h	/^	FONS_ALIGN_BASELINE	= 1<<6, \/\/ Default$/;"	e	enum:FONSalign
FONS_ALIGN_BOTTOM	fontstash.h	/^	FONS_ALIGN_BOTTOM	= 1<<5,$/;"	e	enum:FONSalign
FONS_ALIGN_CENTER	fontstash.h	/^	FONS_ALIGN_CENTER 	= 1<<1,$/;"	e	enum:FONSalign
FONS_ALIGN_LEFT	fontstash.h	/^	FONS_ALIGN_LEFT 	= 1<<0,	\/\/ Default$/;"	e	enum:FONSalign
FONS_ALIGN_MIDDLE	fontstash.h	/^	FONS_ALIGN_MIDDLE	= 1<<4,$/;"	e	enum:FONSalign
FONS_ALIGN_RIGHT	fontstash.h	/^	FONS_ALIGN_RIGHT 	= 1<<2,$/;"	e	enum:FONSalign
FONS_ALIGN_TOP	fontstash.h	/^	FONS_ALIGN_TOP 		= 1<<3,$/;"	e	enum:FONSalign
FONS_ATLAS_FULL	fontstash.h	/^	FONS_ATLAS_FULL = 1,$/;"	e	enum:FONSerrorCode
FONS_GLYPH_BITMAP_OPTIONAL	fontstash.h	/^	FONS_GLYPH_BITMAP_OPTIONAL = 1,$/;"	e	enum:FONSglyphBitmap
FONS_GLYPH_BITMAP_REQUIRED	fontstash.h	/^	FONS_GLYPH_BITMAP_REQUIRED = 2,$/;"	e	enum:FONSglyphBitmap
FONS_H	fontstash.h	/^#define FONS_H$/;"	d
FONS_HASH_LUT_SIZE	fontstash.h	/^#	define FONS_HASH_LUT_SIZE /;"	d
FONS_INIT_ATLAS_NODES	fontstash.h	/^#	define FONS_INIT_ATLAS_NODES /;"	d
FONS_INIT_FONTS	fontstash.h	/^#	define FONS_INIT_FONTS /;"	d
FONS_INIT_GLYPHS	fontstash.h	/^#	define FONS_INIT_GLYPHS /;"	d
FONS_INVALID	fontstash.h	/^#define FONS_INVALID /;"	d
FONS_MAX_FALLBACKS	fontstash.h	/^#	define FONS_MAX_FALLBACKS /;"	d
FONS_MAX_STATES	fontstash.h	/^#	define FONS_MAX_STATES /;"	d
FONS_NOTUSED	fontstash.h	/^#define FONS_NOTUSED(/;"	d
FONS_SCRATCH_BUF_SIZE	fontstash.h	/^#	define FONS_SCRATCH_BUF_SIZE /;"	d
FONS_SCRATCH_FULL	fontstash.h	/^	FONS_SCRATCH_FULL = 2,$/;"	e	enum:FONSerrorCode
FONS_STATES_OVERFLOW	fontstash.h	/^	FONS_STATES_OVERFLOW = 3,$/;"	e	enum:FONSerrorCode
FONS_STATES_UNDERFLOW	fontstash.h	/^	FONS_STATES_UNDERFLOW = 4,$/;"	e	enum:FONSerrorCode
FONS_UTF8_ACCEPT	fontstash.h	/^#define FONS_UTF8_ACCEPT /;"	d
FONS_UTF8_REJECT	fontstash.h	/^#define FONS_UTF8_REJECT /;"	d
FONS_VERTEX_COUNT	fontstash.h	/^#	define FONS_VERTEX_COUNT /;"	d
FONS_ZERO_BOTTOMLEFT	fontstash.h	/^	FONS_ZERO_BOTTOMLEFT = 2,$/;"	e	enum:FONSflags
FONS_ZERO_TOPLEFT	fontstash.h	/^	FONS_ZERO_TOPLEFT = 1,$/;"	e	enum:FONSflags
FONSalign	fontstash.h	/^enum FONSalign {$/;"	g
FONSatlas	fontstash.h	/^struct FONSatlas$/;"	s
FONSatlas	fontstash.h	/^typedef struct FONSatlas FONSatlas;$/;"	t	typeref:struct:FONSatlas
FONSatlasNode	fontstash.h	/^struct FONSatlasNode {$/;"	s
FONSatlasNode	fontstash.h	/^typedef struct FONSatlasNode FONSatlasNode;$/;"	t	typeref:struct:FONSatlasNode
FONScontext	fontstash.h	/^struct FONScontext$/;"	s
FONScontext	fontstash.h	/^typedef struct FONScontext FONScontext;$/;"	t	typeref:struct:FONScontext
FONSerrorCode	fontstash.h	/^enum FONSerrorCode {$/;"	g
FONSflags	fontstash.h	/^enum FONSflags {$/;"	g
FONSfont	fontstash.h	/^struct FONSfont$/;"	s
FONSfont	fontstash.h	/^typedef struct FONSfont FONSfont;$/;"	t	typeref:struct:FONSfont
FONSglyph	fontstash.h	/^struct FONSglyph$/;"	s
FONSglyph	fontstash.h	/^typedef struct FONSglyph FONSglyph;$/;"	t	typeref:struct:FONSglyph
FONSglyphBitmap	fontstash.h	/^enum FONSglyphBitmap {$/;"	g
FONSparams	fontstash.h	/^struct FONSparams {$/;"	s
FONSparams	fontstash.h	/^typedef struct FONSparams FONSparams;$/;"	t	typeref:struct:FONSparams
FONSquad	fontstash.h	/^struct FONSquad$/;"	s
FONSquad	fontstash.h	/^typedef struct FONSquad FONSquad;$/;"	t	typeref:struct:FONSquad
FONSstate	fontstash.h	/^struct FONSstate$/;"	s
FONSstate	fontstash.h	/^typedef struct FONSstate FONSstate;$/;"	t	typeref:struct:FONSstate
FONStextIter	fontstash.h	/^struct FONStextIter {$/;"	s
FONStextIter	fontstash.h	/^typedef struct FONStextIter FONStextIter;$/;"	t	typeref:struct:FONStextIter
FONSttFontImpl	fontstash.h	/^struct FONSttFontImpl {$/;"	s
FONSttFontImpl	fontstash.h	/^typedef struct FONSttFontImpl FONSttFontImpl;$/;"	t	typeref:struct:FONSttFontImpl
FONTSTASH_IMPLEMENTATION	nanovg.c	/^#define FONTSTASH_IMPLEMENTATION$/;"	d	file:
GLNVG_CONVEXFILL	nanovg_gl.h	/^	GLNVG_CONVEXFILL,$/;"	e	enum:GLNVGcallType
GLNVG_FILL	nanovg_gl.h	/^	GLNVG_FILL,$/;"	e	enum:GLNVGcallType
GLNVG_FRAG_BINDING	nanovg_gl.h	/^	GLNVG_FRAG_BINDING = 0,$/;"	e	enum:GLNVGuniformBindings
GLNVG_LOC_FRAG	nanovg_gl.h	/^	GLNVG_LOC_FRAG,$/;"	e	enum:GLNVGuniformLoc
GLNVG_LOC_TEX	nanovg_gl.h	/^	GLNVG_LOC_TEX,$/;"	e	enum:GLNVGuniformLoc
GLNVG_LOC_VIEWSIZE	nanovg_gl.h	/^	GLNVG_LOC_VIEWSIZE,$/;"	e	enum:GLNVGuniformLoc
GLNVG_MAX_LOCS	nanovg_gl.h	/^	GLNVG_MAX_LOCS$/;"	e	enum:GLNVGuniformLoc
GLNVG_NONE	nanovg_gl.h	/^	GLNVG_NONE = 0,$/;"	e	enum:GLNVGcallType
GLNVG_STROKE	nanovg_gl.h	/^	GLNVG_STROKE,$/;"	e	enum:GLNVGcallType
GLNVG_TRIANGLES	nanovg_gl.h	/^	GLNVG_TRIANGLES,$/;"	e	enum:GLNVGcallType
GLNVGblend	nanovg_gl.h	/^struct GLNVGblend$/;"	s
GLNVGblend	nanovg_gl.h	/^typedef struct GLNVGblend GLNVGblend;$/;"	t	typeref:struct:GLNVGblend
GLNVGcall	nanovg_gl.h	/^struct GLNVGcall {$/;"	s
GLNVGcall	nanovg_gl.h	/^typedef struct GLNVGcall GLNVGcall;$/;"	t	typeref:struct:GLNVGcall
GLNVGcallType	nanovg_gl.h	/^enum GLNVGcallType {$/;"	g
GLNVGcontext	nanovg_gl.h	/^struct GLNVGcontext {$/;"	s
GLNVGcontext	nanovg_gl.h	/^typedef struct GLNVGcontext GLNVGcontext;$/;"	t	typeref:struct:GLNVGcontext
GLNVGfragUniforms	nanovg_gl.h	/^struct GLNVGfragUniforms {$/;"	s
GLNVGfragUniforms	nanovg_gl.h	/^typedef struct GLNVGfragUniforms GLNVGfragUniforms;$/;"	t	typeref:struct:GLNVGfragUniforms
GLNVGpath	nanovg_gl.h	/^struct GLNVGpath {$/;"	s
GLNVGpath	nanovg_gl.h	/^typedef struct GLNVGpath GLNVGpath;$/;"	t	typeref:struct:GLNVGpath
GLNVGshader	nanovg_gl.h	/^struct GLNVGshader {$/;"	s
GLNVGshader	nanovg_gl.h	/^typedef struct GLNVGshader GLNVGshader;$/;"	t	typeref:struct:GLNVGshader
GLNVGshaderType	nanovg_gl.h	/^enum GLNVGshaderType {$/;"	g
GLNVGtexture	nanovg_gl.h	/^struct GLNVGtexture {$/;"	s
GLNVGtexture	nanovg_gl.h	/^typedef struct GLNVGtexture GLNVGtexture;$/;"	t	typeref:struct:GLNVGtexture
GLNVGuniformBindings	nanovg_gl.h	/^enum GLNVGuniformBindings {$/;"	g
GLNVGuniformLoc	nanovg_gl.h	/^enum GLNVGuniformLoc {$/;"	g
NANOVG_FBO_VALID	nanovg_gl_utils.h	/^#		define NANOVG_FBO_VALID /;"	d
NANOVG_FBO_VALID	nanovg_gl_utils.h	/^#	define NANOVG_FBO_VALID /;"	d
NANOVG_GL2	nanovg_gl.h	/^#  define NANOVG_GL2 /;"	d
NANOVG_GL3	nanovg_gl.h	/^#  define NANOVG_GL3 /;"	d
NANOVG_GLES2	nanovg_gl.h	/^#  define NANOVG_GLES2 /;"	d
NANOVG_GLES3	nanovg_gl.h	/^#  define NANOVG_GLES3 /;"	d
NANOVG_GL_H	nanovg_gl.h	/^#define NANOVG_GL_H$/;"	d
NANOVG_GL_IMPLEMENTATION	nanovg_gl.h	/^#  define NANOVG_GL_IMPLEMENTATION /;"	d
NANOVG_GL_USE_STATE_FILTER	nanovg_gl.h	/^#define NANOVG_GL_USE_STATE_FILTER /;"	d
NANOVG_GL_USE_UNIFORMBUFFER	nanovg_gl.h	/^#  define NANOVG_GL_USE_UNIFORMBUFFER /;"	d
NANOVG_GL_UTILS_H	nanovg_gl_utils.h	/^#define NANOVG_GL_UTILS_H$/;"	d
NANOVG_H	nanovg.h	/^#define NANOVG_H$/;"	d
NSVG_SHADER_FILLGRAD	nanovg_gl.h	/^	NSVG_SHADER_FILLGRAD,$/;"	e	enum:GLNVGshaderType
NSVG_SHADER_FILLIMG	nanovg_gl.h	/^	NSVG_SHADER_FILLIMG,$/;"	e	enum:GLNVGshaderType
NSVG_SHADER_IMG	nanovg_gl.h	/^	NSVG_SHADER_IMG$/;"	e	enum:GLNVGshaderType
NSVG_SHADER_SIMPLE	nanovg_gl.h	/^	NSVG_SHADER_SIMPLE,$/;"	e	enum:GLNVGshaderType
NVGLUframebuffer	nanovg_gl_utils.h	/^struct NVGLUframebuffer {$/;"	s
NVGLUframebuffer	nanovg_gl_utils.h	/^typedef struct NVGLUframebuffer NVGLUframebuffer;$/;"	t	typeref:struct:NVGLUframebuffer
NVG_ALIGN_BASELINE	nanovg.h	/^	NVG_ALIGN_BASELINE	= 1<<6, \/\/ Default, align text vertically to baseline.$/;"	e	enum:NVGalign
NVG_ALIGN_BOTTOM	nanovg.h	/^	NVG_ALIGN_BOTTOM	= 1<<5,	\/\/ Align text vertically to bottom.$/;"	e	enum:NVGalign
NVG_ALIGN_CENTER	nanovg.h	/^	NVG_ALIGN_CENTER 	= 1<<1,	\/\/ Align text horizontally to center.$/;"	e	enum:NVGalign
NVG_ALIGN_LEFT	nanovg.h	/^	NVG_ALIGN_LEFT 		= 1<<0,	\/\/ Default, align text horizontally to left.$/;"	e	enum:NVGalign
NVG_ALIGN_MIDDLE	nanovg.h	/^	NVG_ALIGN_MIDDLE	= 1<<4,	\/\/ Align text vertically to middle.$/;"	e	enum:NVGalign
NVG_ALIGN_RIGHT	nanovg.h	/^	NVG_ALIGN_RIGHT 	= 1<<2,	\/\/ Align text horizontally to right.$/;"	e	enum:NVGalign
NVG_ALIGN_TOP	nanovg.h	/^	NVG_ALIGN_TOP 		= 1<<3,	\/\/ Align text vertically to top.$/;"	e	enum:NVGalign
NVG_ANTIALIAS	nanovg_gl.h	/^	NVG_ANTIALIAS 		= 1<<0,$/;"	e	enum:NVGcreateFlags
NVG_ATOP	nanovg.h	/^	NVG_ATOP,$/;"	e	enum:NVGcompositeOperation
NVG_BEVEL	nanovg.h	/^	NVG_BEVEL,$/;"	e	enum:NVGlineCap
NVG_BEZIERTO	nanovg.c	/^	NVG_BEZIERTO = 2,$/;"	e	enum:NVGcommands	file:
NVG_BUTT	nanovg.h	/^	NVG_BUTT,$/;"	e	enum:NVGlineCap
NVG_CCW	nanovg.h	/^	NVG_CCW = 1,			\/\/ Winding for solid shapes$/;"	e	enum:NVGwinding
NVG_CHAR	nanovg.c	/^	NVG_CHAR,$/;"	e	enum:NVGcodepointType	file:
NVG_CJK_CHAR	nanovg.c	/^	NVG_CJK_CHAR,$/;"	e	enum:NVGcodepointType	file:
NVG_CLOSE	nanovg.c	/^	NVG_CLOSE = 3,$/;"	e	enum:NVGcommands	file:
NVG_COPY	nanovg.h	/^	NVG_COPY,$/;"	e	enum:NVGcompositeOperation
NVG_COUNTOF	nanovg.c	/^#define NVG_COUNTOF(/;"	d	file:
NVG_CW	nanovg.h	/^	NVG_CW = 2,				\/\/ Winding for holes$/;"	e	enum:NVGwinding
NVG_DEBUG	nanovg_gl.h	/^	NVG_DEBUG 			= 1<<2,$/;"	e	enum:NVGcreateFlags
NVG_DESTINATION_ATOP	nanovg.h	/^	NVG_DESTINATION_ATOP,$/;"	e	enum:NVGcompositeOperation
NVG_DESTINATION_IN	nanovg.h	/^	NVG_DESTINATION_IN,$/;"	e	enum:NVGcompositeOperation
NVG_DESTINATION_OUT	nanovg.h	/^	NVG_DESTINATION_OUT,$/;"	e	enum:NVGcompositeOperation
NVG_DESTINATION_OVER	nanovg.h	/^	NVG_DESTINATION_OVER,$/;"	e	enum:NVGcompositeOperation
NVG_DST_ALPHA	nanovg.h	/^	NVG_DST_ALPHA = 1<<8,$/;"	e	enum:NVGblendFactor
NVG_DST_COLOR	nanovg.h	/^	NVG_DST_COLOR = 1<<4,$/;"	e	enum:NVGblendFactor
NVG_HOLE	nanovg.h	/^	NVG_HOLE = 2,			\/\/ CW$/;"	e	enum:NVGsolidity
NVG_IMAGE_FLIPY	nanovg.h	/^	NVG_IMAGE_FLIPY				= 1<<3,		\/\/ Flips (inverses) image in Y direction when rendered.$/;"	e	enum:NVGimageFlags
NVG_IMAGE_GENERATE_MIPMAPS	nanovg.h	/^    NVG_IMAGE_GENERATE_MIPMAPS	= 1<<0,     \/\/ Generate mipmaps during creation of the image.$/;"	e	enum:NVGimageFlags
NVG_IMAGE_NEAREST	nanovg.h	/^	NVG_IMAGE_NEAREST			= 1<<5,		\/\/ Image interpolation is Nearest instead Linear$/;"	e	enum:NVGimageFlags
NVG_IMAGE_NODELETE	nanovg_gl.h	/^	NVG_IMAGE_NODELETE			= 1<<16,	\/\/ Do not delete GL texture handle.$/;"	e	enum:NVGimageFlagsGL
NVG_IMAGE_PREMULTIPLIED	nanovg.h	/^	NVG_IMAGE_PREMULTIPLIED		= 1<<4,		\/\/ Image data has premultiplied alpha.$/;"	e	enum:NVGimageFlags
NVG_IMAGE_REPEATX	nanovg.h	/^	NVG_IMAGE_REPEATX			= 1<<1,		\/\/ Repeat image in X direction.$/;"	e	enum:NVGimageFlags
NVG_IMAGE_REPEATY	nanovg.h	/^	NVG_IMAGE_REPEATY			= 1<<2,		\/\/ Repeat image in Y direction.$/;"	e	enum:NVGimageFlags
NVG_INIT_COMMANDS_SIZE	nanovg.c	/^#define NVG_INIT_COMMANDS_SIZE /;"	d	file:
NVG_INIT_FONTIMAGE_SIZE	nanovg.c	/^#define NVG_INIT_FONTIMAGE_SIZE /;"	d	file:
NVG_INIT_PATHS_SIZE	nanovg.c	/^#define NVG_INIT_PATHS_SIZE /;"	d	file:
NVG_INIT_POINTS_SIZE	nanovg.c	/^#define NVG_INIT_POINTS_SIZE /;"	d	file:
NVG_INIT_VERTS_SIZE	nanovg.c	/^#define NVG_INIT_VERTS_SIZE /;"	d	file:
NVG_KAPPA90	nanovg.c	/^#define NVG_KAPPA90 /;"	d	file:
NVG_LIGHTER	nanovg.h	/^	NVG_LIGHTER,$/;"	e	enum:NVGcompositeOperation
NVG_LINETO	nanovg.c	/^	NVG_LINETO = 1,$/;"	e	enum:NVGcommands	file:
NVG_MAX_FONTIMAGES	nanovg.c	/^#define NVG_MAX_FONTIMAGES /;"	d	file:
NVG_MAX_FONTIMAGE_SIZE	nanovg.c	/^#define NVG_MAX_FONTIMAGE_SIZE /;"	d	file:
NVG_MAX_STATES	nanovg.c	/^#define NVG_MAX_STATES /;"	d	file:
NVG_MITER	nanovg.h	/^	NVG_MITER,$/;"	e	enum:NVGlineCap
NVG_MOVETO	nanovg.c	/^	NVG_MOVETO = 0,$/;"	e	enum:NVGcommands	file:
NVG_NEWLINE	nanovg.c	/^	NVG_NEWLINE,$/;"	e	enum:NVGcodepointType	file:
NVG_NOTUSED	nanovg.h	/^#define NVG_NOTUSED(/;"	d
NVG_ONE	nanovg.h	/^	NVG_ONE = 1<<1,$/;"	e	enum:NVGblendFactor
NVG_ONE_MINUS_DST_ALPHA	nanovg.h	/^	NVG_ONE_MINUS_DST_ALPHA = 1<<9,$/;"	e	enum:NVGblendFactor
NVG_ONE_MINUS_DST_COLOR	nanovg.h	/^	NVG_ONE_MINUS_DST_COLOR = 1<<5,$/;"	e	enum:NVGblendFactor
NVG_ONE_MINUS_SRC_ALPHA	nanovg.h	/^	NVG_ONE_MINUS_SRC_ALPHA = 1<<7,$/;"	e	enum:NVGblendFactor
NVG_ONE_MINUS_SRC_COLOR	nanovg.h	/^	NVG_ONE_MINUS_SRC_COLOR = 1<<3,$/;"	e	enum:NVGblendFactor
NVG_PI	nanovg.h	/^#define NVG_PI /;"	d
NVG_PR_INNERBEVEL	nanovg.c	/^	NVG_PR_INNERBEVEL = 0x08,$/;"	e	enum:NVGpointFlags	file:
NVG_PT_BEVEL	nanovg.c	/^	NVG_PT_BEVEL = 0x04,$/;"	e	enum:NVGpointFlags	file:
NVG_PT_CORNER	nanovg.c	/^	NVG_PT_CORNER = 0x01,$/;"	e	enum:NVGpointFlags	file:
NVG_PT_LEFT	nanovg.c	/^	NVG_PT_LEFT = 0x02,$/;"	e	enum:NVGpointFlags	file:
NVG_ROUND	nanovg.h	/^	NVG_ROUND,$/;"	e	enum:NVGlineCap
NVG_SOLID	nanovg.h	/^	NVG_SOLID = 1,			\/\/ CCW$/;"	e	enum:NVGsolidity
NVG_SOURCE_IN	nanovg.h	/^	NVG_SOURCE_IN,$/;"	e	enum:NVGcompositeOperation
NVG_SOURCE_OUT	nanovg.h	/^	NVG_SOURCE_OUT,$/;"	e	enum:NVGcompositeOperation
NVG_SOURCE_OVER	nanovg.h	/^	NVG_SOURCE_OVER,$/;"	e	enum:NVGcompositeOperation
NVG_SPACE	nanovg.c	/^	NVG_SPACE,$/;"	e	enum:NVGcodepointType	file:
NVG_SQUARE	nanovg.h	/^	NVG_SQUARE,$/;"	e	enum:NVGlineCap
NVG_SRC_ALPHA	nanovg.h	/^	NVG_SRC_ALPHA = 1<<6,$/;"	e	enum:NVGblendFactor
NVG_SRC_ALPHA_SATURATE	nanovg.h	/^	NVG_SRC_ALPHA_SATURATE = 1<<10,$/;"	e	enum:NVGblendFactor
NVG_SRC_COLOR	nanovg.h	/^	NVG_SRC_COLOR = 1<<2,$/;"	e	enum:NVGblendFactor
NVG_STENCIL_STROKES	nanovg_gl.h	/^	NVG_STENCIL_STROKES	= 1<<1,$/;"	e	enum:NVGcreateFlags
NVG_TEXTURE_ALPHA	nanovg.h	/^	NVG_TEXTURE_ALPHA = 0x01,$/;"	e	enum:NVGtexture
NVG_TEXTURE_RGBA	nanovg.h	/^	NVG_TEXTURE_RGBA = 0x02,$/;"	e	enum:NVGtexture
NVG_WINDING	nanovg.c	/^	NVG_WINDING = 4,$/;"	e	enum:NVGcommands	file:
NVG_XOR	nanovg.h	/^	NVG_XOR,$/;"	e	enum:NVGcompositeOperation
NVG_ZERO	nanovg.h	/^	NVG_ZERO = 1<<0,$/;"	e	enum:NVGblendFactor
NVGalign	nanovg.h	/^enum NVGalign {$/;"	g
NVGblendFactor	nanovg.h	/^enum NVGblendFactor {$/;"	g
NVGcodepointType	nanovg.c	/^enum NVGcodepointType {$/;"	g	file:
NVGcolor	nanovg.h	/^struct NVGcolor {$/;"	s
NVGcolor	nanovg.h	/^typedef struct NVGcolor NVGcolor;$/;"	t	typeref:struct:NVGcolor
NVGcommands	nanovg.c	/^enum NVGcommands {$/;"	g	file:
NVGcompositeOperation	nanovg.h	/^enum NVGcompositeOperation {$/;"	g
NVGcompositeOperationState	nanovg.h	/^struct NVGcompositeOperationState {$/;"	s
NVGcompositeOperationState	nanovg.h	/^typedef struct NVGcompositeOperationState NVGcompositeOperationState;$/;"	t	typeref:struct:NVGcompositeOperationState
NVGcontext	nanovg.c	/^struct NVGcontext {$/;"	s	file:
NVGcontext	nanovg.h	/^typedef struct NVGcontext NVGcontext;$/;"	t	typeref:struct:NVGcontext
NVGcreateFlags	nanovg_gl.h	/^enum NVGcreateFlags {$/;"	g
NVGglyphPosition	nanovg.h	/^struct NVGglyphPosition {$/;"	s
NVGglyphPosition	nanovg.h	/^typedef struct NVGglyphPosition NVGglyphPosition;$/;"	t	typeref:struct:NVGglyphPosition
NVGimageFlags	nanovg.h	/^enum NVGimageFlags {$/;"	g
NVGimageFlagsGL	nanovg_gl.h	/^enum NVGimageFlagsGL {$/;"	g
NVGlineCap	nanovg.h	/^enum NVGlineCap {$/;"	g
NVGpaint	nanovg.h	/^struct NVGpaint {$/;"	s
NVGpaint	nanovg.h	/^typedef struct NVGpaint NVGpaint;$/;"	t	typeref:struct:NVGpaint
NVGparams	nanovg.h	/^struct NVGparams {$/;"	s
NVGparams	nanovg.h	/^typedef struct NVGparams NVGparams;$/;"	t	typeref:struct:NVGparams
NVGpath	nanovg.h	/^struct NVGpath {$/;"	s
NVGpath	nanovg.h	/^typedef struct NVGpath NVGpath;$/;"	t	typeref:struct:NVGpath
NVGpathCache	nanovg.c	/^struct NVGpathCache {$/;"	s	file:
NVGpathCache	nanovg.c	/^typedef struct NVGpathCache NVGpathCache;$/;"	t	typeref:struct:NVGpathCache	file:
NVGpoint	nanovg.c	/^struct NVGpoint {$/;"	s	file:
NVGpoint	nanovg.c	/^typedef struct NVGpoint NVGpoint;$/;"	t	typeref:struct:NVGpoint	file:
NVGpointFlags	nanovg.c	/^enum NVGpointFlags$/;"	g	file:
NVGscissor	nanovg.h	/^struct NVGscissor {$/;"	s
NVGscissor	nanovg.h	/^typedef struct NVGscissor NVGscissor;$/;"	t	typeref:struct:NVGscissor
NVGsolidity	nanovg.h	/^enum NVGsolidity {$/;"	g
NVGstate	nanovg.c	/^struct NVGstate {$/;"	s	file:
NVGstate	nanovg.c	/^typedef struct NVGstate NVGstate;$/;"	t	typeref:struct:NVGstate	file:
NVGtextRow	nanovg.h	/^struct NVGtextRow {$/;"	s
NVGtextRow	nanovg.h	/^typedef struct NVGtextRow NVGtextRow;$/;"	t	typeref:struct:NVGtextRow
NVGtexture	nanovg.h	/^enum NVGtexture {$/;"	g
NVGvertex	nanovg.h	/^struct NVGvertex {$/;"	s
NVGvertex	nanovg.h	/^typedef struct NVGvertex NVGvertex;$/;"	t	typeref:struct:NVGvertex
NVGwinding	nanovg.h	/^enum NVGwinding {$/;"	g
STBIDEF	stb_image.h	/^#define STBIDEF /;"	d
STBI_ASSERT	stb_image.h	/^#define STBI_ASSERT(/;"	d
STBI_FREE	stb_image.h	/^#define STBI_FREE(/;"	d
STBI_HAS_LROTL	stb_image.h	/^#define STBI_HAS_LROTL$/;"	d
STBI_INCLUDE_STB_IMAGE_H	stb_image.h	/^#define STBI_INCLUDE_STB_IMAGE_H$/;"	d
STBI_MALLOC	stb_image.h	/^#define STBI_MALLOC(/;"	d
STBI_NEON	stb_image.h	/^#undef STBI_NEON$/;"	d
STBI_NOTUSED	stb_image.h	/^#define STBI_NOTUSED(/;"	d
STBI_NO_BMP	stb_image.h	/^   #define STBI_NO_BMP$/;"	d
STBI_NO_GIF	stb_image.h	/^   #define STBI_NO_GIF$/;"	d
STBI_NO_HDR	stb_image.h	/^   #define STBI_NO_HDR$/;"	d
STBI_NO_JPEG	stb_image.h	/^   #define STBI_NO_JPEG$/;"	d
STBI_NO_PIC	stb_image.h	/^   #define STBI_NO_PIC$/;"	d
STBI_NO_PNG	stb_image.h	/^   #define STBI_NO_PNG$/;"	d
STBI_NO_PNM	stb_image.h	/^   #define STBI_NO_PNM$/;"	d
STBI_NO_PSD	stb_image.h	/^   #define STBI_NO_PSD$/;"	d
STBI_NO_SIMD	stb_image.h	/^#define STBI_NO_SIMD$/;"	d
STBI_NO_TGA	stb_image.h	/^   #define STBI_NO_TGA$/;"	d
STBI_NO_ZLIB	stb_image.h	/^#define STBI_NO_ZLIB$/;"	d
STBI_REALLOC	stb_image.h	/^#define STBI_REALLOC(/;"	d
STBI_REALLOC_SIZED	stb_image.h	/^#define STBI_REALLOC_SIZED(/;"	d
STBI_SIMD_ALIGN	stb_image.h	/^#define STBI_SIMD_ALIGN(/;"	d
STBI_SSE2	stb_image.h	/^#define STBI_SSE2$/;"	d
STBI_VERSION	stb_image.h	/^#define STBI_VERSION /;"	d
STBI__BYTECAST	stb_image.h	/^#define STBI__BYTECAST(/;"	d
STBI__F_avg	stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon15
STBI__F_avg_first	stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon15
STBI__F_none	stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon15
STBI__F_paeth	stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon15
STBI__F_paeth_first	stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon15
STBI__F_sub	stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon15
STBI__F_up	stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon15
STBI__HDR_BUFLEN	stb_image.h	/^#define STBI__HDR_BUFLEN /;"	d
STBI__IDCT_1D	stb_image.h	/^#define STBI__IDCT_1D(/;"	d
STBI__MARKER_none	stb_image.h	/^#define STBI__MARKER_none /;"	d
STBI__PNG_TYPE	stb_image.h	/^#define STBI__PNG_TYPE(/;"	d
STBI__RESTART	stb_image.h	/^#define STBI__RESTART(/;"	d
STBI__SCAN_header	stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon6
STBI__SCAN_load	stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon6
STBI__SCAN_type	stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon6
STBI__X64_TARGET	stb_image.h	/^#define STBI__X64_TARGET$/;"	d
STBI__X86_TARGET	stb_image.h	/^#define STBI__X86_TARGET$/;"	d
STBI__ZFAST_BITS	stb_image.h	/^#define STBI__ZFAST_BITS /;"	d
STBI__ZFAST_MASK	stb_image.h	/^#define STBI__ZFAST_MASK /;"	d
STBI_default	stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon3
STBI_grey	stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon3
STBI_grey_alpha	stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon3
STBI_rgb	stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon3
STBI_rgb_alpha	stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon3
STBTT_DEF	stb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	stb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	stb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	stb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_MACSTYLE_BOLD	stb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	stb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	stb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	stb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	stb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	stb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon30
STBTT_MAC_EID_CHINESE_TRAD	stb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon30
STBTT_MAC_EID_GREEK	stb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon30
STBTT_MAC_EID_HEBREW	stb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon30
STBTT_MAC_EID_JAPANESE	stb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon30
STBTT_MAC_EID_KOREAN	stb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon30
STBTT_MAC_EID_ROMAN	stb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon30
STBTT_MAC_EID_RUSSIAN	stb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon30
STBTT_MAC_LANG_ARABIC	stb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon32
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	stb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon32
STBTT_MAC_LANG_CHINESE_TRAD	stb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon32
STBTT_MAC_LANG_DUTCH	stb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon32
STBTT_MAC_LANG_ENGLISH	stb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon32
STBTT_MAC_LANG_FRENCH	stb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon32
STBTT_MAC_LANG_GERMAN	stb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon32
STBTT_MAC_LANG_HEBREW	stb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon32
STBTT_MAC_LANG_ITALIAN	stb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon32
STBTT_MAC_LANG_JAPANESE	stb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon32
STBTT_MAC_LANG_KOREAN	stb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon32
STBTT_MAC_LANG_RUSSIAN	stb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon32
STBTT_MAC_LANG_SPANISH	stb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon32
STBTT_MAC_LANG_SWEDISH	stb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon32
STBTT_MAX_OVERSAMPLE	stb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	stb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon29
STBTT_MS_EID_SYMBOL	stb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon29
STBTT_MS_EID_UNICODE_BMP	stb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon29
STBTT_MS_EID_UNICODE_FULL	stb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon29
STBTT_MS_LANG_CHINESE	stb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon31
STBTT_MS_LANG_DUTCH	stb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon31
STBTT_MS_LANG_ENGLISH	stb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon31
STBTT_MS_LANG_FRENCH	stb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon31
STBTT_MS_LANG_GERMAN	stb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon31
STBTT_MS_LANG_HEBREW	stb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon31
STBTT_MS_LANG_ITALIAN	stb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon31
STBTT_MS_LANG_JAPANESE	stb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon31
STBTT_MS_LANG_KOREAN	stb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon31
STBTT_MS_LANG_RUSSIAN	stb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon31
STBTT_MS_LANG_SPANISH	stb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon31
STBTT_MS_LANG_SWEDISH	stb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon31
STBTT_PLATFORM_ID_ISO	stb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon27
STBTT_PLATFORM_ID_MAC	stb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon27
STBTT_PLATFORM_ID_MICROSOFT	stb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon27
STBTT_PLATFORM_ID_UNICODE	stb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon27
STBTT_POINT_SIZE	stb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	stb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_UNICODE_EID_ISO_10646	stb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon28
STBTT_UNICODE_EID_UNICODE_1_0	stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon28
STBTT_UNICODE_EID_UNICODE_1_1	stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon28
STBTT_UNICODE_EID_UNICODE_2_0_BMP	stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon28
STBTT_UNICODE_EID_UNICODE_2_0_FULL	stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon28
STBTT__COMPARE	stb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__NOTUSED	stb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	stb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_assert	stb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_free	fontstash.h	/^#define STBTT_free(/;"	d
STBTT_free	stb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	stb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	stb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	fontstash.h	/^#define STBTT_malloc(/;"	d
STBTT_malloc	stb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_memcpy	stb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	stb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_sqrt	stb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	stb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcurve	stb_truetype.h	/^      STBTT_vcurve$/;"	e	enum:__anon24
STBTT_vline	stb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon24
STBTT_vmove	stb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon24
STB_IMAGE_IMPLEMENTATION	nanovg.c	/^#define STB_IMAGE_IMPLEMENTATION$/;"	d	file:
STB_TRUETYPE_IMPLEMENTATION	fontstash.h	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d
YCbCr_to_RGB_kernel	stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon8
ZPREC	fontstash.h	/^#define ZPREC /;"	d
__STB_INCLUDE_STB_TRUETYPE_H__	stb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
a	nanovg.h	/^			float r,g,b,a;$/;"	m	struct:NVGcolor::__anon1::__anon2
align	fontstash.h	/^	int align;$/;"	m	struct:FONSstate
all_a	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
alpha	nanovg.c	/^	float alpha;$/;"	m	struct:NVGstate	file:
array_of_unicode_codepoints	stb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode codepoints$/;"	m	struct:__anon23
ascender	fontstash.h	/^	float ascender;$/;"	m	struct:FONSfont
atlas	fontstash.h	/^	FONSatlas* atlas;$/;"	m	struct:FONScontext
b	nanovg.h	/^			float r,g,b,a;$/;"	m	struct:NVGcolor::__anon1::__anon2
bgindex	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
bitmapOption	fontstash.h	/^	int bitmapOption;$/;"	m	struct:FONStextIter
blendFunc	nanovg_gl.h	/^	GLNVGblend blendFunc;$/;"	m	struct:GLNVGcall
blendFunc	nanovg_gl.h	/^	GLNVGblend blendFunc;$/;"	m	struct:GLNVGcontext
blur	fontstash.h	/^	float blur;$/;"	m	struct:FONSstate
blur	fontstash.h	/^	short size, blur;$/;"	m	struct:FONSglyph
bottom_y	stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon34
boundTexture	nanovg_gl.h	/^	GLuint boundTexture;$/;"	m	struct:GLNVGcontext
bounds	nanovg.c	/^	float bounds[4];$/;"	m	struct:NVGpathCache	file:
bpp	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon16
buffer_start	stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon5
buflen	stb_image.h	/^   int buflen;$/;"	m	struct:__anon5
cache	nanovg.c	/^	NVGpathCache* cache;$/;"	m	struct:NVGcontext	file:
calls	nanovg_gl.h	/^	GLNVGcall* calls;$/;"	m	struct:GLNVGcontext
ccalls	nanovg_gl.h	/^	int ccalls;$/;"	m	struct:GLNVGcontext
ccommands	nanovg.c	/^	int ccommands;$/;"	m	struct:NVGcontext	file:
cdata	stb_truetype.h	/^stbtt_bakedchar cdata[96]; \/\/ ASCII 32..126 is 95 glyphs$/;"	v
cfonts	fontstash.h	/^	int cfonts;$/;"	m	struct:FONScontext
cglyphs	fontstash.h	/^	int cglyphs;$/;"	m	struct:FONSfont
channel	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17
chardata_for_range	stb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon23
closed	nanovg.h	/^	unsigned char closed;$/;"	m	struct:NVGpath
cnodes	fontstash.h	/^	int cnodes;$/;"	m	struct:FONSatlas
code	stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon7
code_bits	stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon8
code_buffer	stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon8
code_buffer	stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon12
codepoint	fontstash.h	/^	unsigned int codepoint;$/;"	m	struct:FONSglyph
codepoint	fontstash.h	/^	unsigned int codepoint;$/;"	m	struct:FONStextIter
codes	stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon19
coeff	stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon8::__anon9
coeff_h	stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon8::__anon9
coeff_w	stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon8::__anon9
color	fontstash.h	/^	unsigned int color;$/;"	m	struct:FONSstate
color_table	stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon19
colors	fontstash.h	/^	unsigned int colors[FONS_VERTEX_COUNT];$/;"	m	struct:FONScontext
commands	nanovg.c	/^	float* commands;$/;"	m	struct:NVGcontext	file:
commandx	nanovg.c	/^	float commandx, commandy;$/;"	m	struct:NVGcontext	file:
commandy	nanovg.c	/^	float commandx, commandy;$/;"	m	struct:NVGcontext	file:
compositeOperation	nanovg.c	/^	NVGcompositeOperationState compositeOperation;$/;"	m	struct:NVGstate	file:
convex	nanovg.h	/^	int convex;$/;"	m	struct:NVGpath
count	nanovg.h	/^	int count;$/;"	m	struct:NVGpath
cpaths	nanovg.c	/^	int cpaths;$/;"	m	struct:NVGpathCache	file:
cpaths	nanovg_gl.h	/^	int cpaths;$/;"	m	struct:GLNVGcontext
cpoints	nanovg.c	/^	int cpoints;$/;"	m	struct:NVGpathCache	file:
ctextures	nanovg_gl.h	/^	int ctextures;$/;"	m	struct:GLNVGcontext
ctx	nanovg_gl_utils.h	/^	NVGcontext* ctx;$/;"	m	struct:NVGLUframebuffer
cuniforms	nanovg_gl.h	/^	int cuniforms;$/;"	m	struct:GLNVGcontext
cur_x	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon19
cur_y	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon19
cverts	nanovg.c	/^	int cverts;$/;"	m	struct:NVGpathCache	file:
cverts	nanovg_gl.h	/^	int cverts;$/;"	m	struct:GLNVGcontext
cx	stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon25
cy	stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon25
data	fontstash.h	/^	unsigned char* data;$/;"	m	struct:FONSfont
data	stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon8::__anon9
data	stb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo
dataSize	fontstash.h	/^	int dataSize;$/;"	m	struct:FONSfont
dc_pred	stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon8::__anon9
dct_bfly32o	stb_image.h	/^   #define dct_bfly32o(/;"	d
dct_bfly32o	stb_image.h	/^#define dct_bfly32o(/;"	d
dct_bfly32o	stb_image.h	/^#undef dct_bfly32o$/;"	d
dct_const	stb_image.h	/^   #define dct_const(/;"	d
dct_const	stb_image.h	/^#undef dct_const$/;"	d
dct_interleave16	stb_image.h	/^   #define dct_interleave16(/;"	d
dct_interleave16	stb_image.h	/^#undef dct_interleave16$/;"	d
dct_interleave8	stb_image.h	/^   #define dct_interleave8(/;"	d
dct_interleave8	stb_image.h	/^#undef dct_interleave8$/;"	d
dct_long_mac	stb_image.h	/^#define dct_long_mac(/;"	d
dct_long_mac	stb_image.h	/^#undef dct_long_mac$/;"	d
dct_long_mul	stb_image.h	/^#define dct_long_mul(/;"	d
dct_long_mul	stb_image.h	/^#undef dct_long_mul$/;"	d
dct_pass	stb_image.h	/^   #define dct_pass(/;"	d
dct_pass	stb_image.h	/^#define dct_pass(/;"	d
dct_pass	stb_image.h	/^#undef dct_pass$/;"	d
dct_rot	stb_image.h	/^   #define dct_rot(/;"	d
dct_rot	stb_image.h	/^#undef dct_rot$/;"	d
dct_trn16	stb_image.h	/^#define dct_trn16(/;"	d
dct_trn16	stb_image.h	/^#undef dct_trn16$/;"	d
dct_trn32	stb_image.h	/^#define dct_trn32(/;"	d
dct_trn32	stb_image.h	/^#undef dct_trn32$/;"	d
dct_trn64	stb_image.h	/^#define dct_trn64(/;"	d
dct_trn64	stb_image.h	/^#undef dct_trn64$/;"	d
dct_trn8_16	stb_image.h	/^#define dct_trn8_16(/;"	d
dct_trn8_16	stb_image.h	/^#undef dct_trn8_16$/;"	d
dct_trn8_32	stb_image.h	/^#define dct_trn8_32(/;"	d
dct_trn8_32	stb_image.h	/^#undef dct_trn8_32$/;"	d
dct_trn8_8	stb_image.h	/^#define dct_trn8_8(/;"	d
dct_trn8_8	stb_image.h	/^#undef dct_trn8_8$/;"	d
dct_wadd	stb_image.h	/^   #define dct_wadd(/;"	d
dct_wadd	stb_image.h	/^#define dct_wadd(/;"	d
dct_wadd	stb_image.h	/^#undef dct_wadd$/;"	d
dct_widen	stb_image.h	/^   #define dct_widen(/;"	d
dct_widen	stb_image.h	/^#define dct_widen(/;"	d
dct_widen	stb_image.h	/^#undef dct_widen$/;"	d
dct_wsub	stb_image.h	/^   #define dct_wsub(/;"	d
dct_wsub	stb_image.h	/^#define dct_wsub(/;"	d
dct_wsub	stb_image.h	/^#undef dct_wsub$/;"	d
defaultFBO	nanovg_gl_utils.h	/^static GLint defaultFBO = -1;$/;"	v
delay	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
delta	stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon7
dequant	stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon8
descender	fontstash.h	/^	float descender;$/;"	m	struct:FONSfont
devicePxRatio	nanovg.c	/^	float devicePxRatio;$/;"	m	struct:NVGcontext	file:
direction	stb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge
direction	stb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge
dirtyRect	fontstash.h	/^	int dirtyRect[4];$/;"	m	struct:FONScontext
distTol	nanovg.c	/^	float distTol;$/;"	m	struct:NVGcontext	file:
dmx	nanovg.c	/^	float dmx, dmy;$/;"	m	struct:NVGpoint	file:
dmy	nanovg.c	/^	float dmx, dmy;$/;"	m	struct:NVGpoint	file:
drawCallCount	nanovg.c	/^	int drawCallCount;$/;"	m	struct:NVGcontext	file:
dstAlpha	nanovg.h	/^	int dstAlpha;$/;"	m	struct:NVGcompositeOperationState
dstAlpha	nanovg_gl.h	/^	GLenum dstAlpha;$/;"	m	struct:GLNVGblend
dstRGB	nanovg.h	/^	int dstRGB;$/;"	m	struct:NVGcompositeOperationState
dstRGB	nanovg_gl.h	/^	GLenum dstRGB;$/;"	m	struct:GLNVGblend
dx	nanovg.c	/^	float dx, dy;$/;"	m	struct:NVGpoint	file:
dx	stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
dy	nanovg.c	/^	float dx, dy;$/;"	m	struct:NVGpoint	file:
edgeAntiAlias	nanovg.h	/^	int edgeAntiAlias;$/;"	m	struct:NVGparams
eflags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
end	fontstash.h	/^	const char* end;$/;"	m	struct:FONStextIter
end	nanovg.h	/^	const char* end;	\/\/ Pointer to the input text where the row ends (one past the last character).$/;"	m	struct:NVGtextRow
eob_run	stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon8
eof	stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon4
errorUptr	fontstash.h	/^	void* errorUptr;$/;"	m	struct:FONScontext
expanded	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon14
extent	nanovg.h	/^	float extent[2];$/;"	m	struct:NVGpaint
extent	nanovg.h	/^	float extent[2];$/;"	m	struct:NVGscissor
extent	nanovg_gl.h	/^		float extent[2];$/;"	m	struct:GLNVGfragUniforms
ey	stb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge
fallbacks	fontstash.h	/^	int fallbacks[FONS_MAX_FALLBACKS];$/;"	m	struct:FONSfont
fast	stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon11
fast	stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon7
fast_ac	stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon8
fbo	nanovg_gl_utils.h	/^	GLuint fbo;$/;"	m	struct:NVGLUframebuffer
fdx	stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
fdy	stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
feather	nanovg.h	/^	float feather;$/;"	m	struct:NVGpaint
feather	nanovg_gl.h	/^		float feather;$/;"	m	struct:GLNVGfragUniforms
fill	nanovg.c	/^	NVGpaint fill;$/;"	m	struct:NVGstate	file:
fill	nanovg.h	/^	NVGvertex* fill;$/;"	m	struct:NVGpath
fillCount	nanovg_gl.h	/^	int fillCount;$/;"	m	struct:GLNVGpath
fillOffset	nanovg_gl.h	/^	int fillOffset;$/;"	m	struct:GLNVGpath
fillTriCount	nanovg.c	/^	int fillTriCount;$/;"	m	struct:NVGcontext	file:
first	nanovg.h	/^	int first;$/;"	m	struct:NVGpath
first	stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon18
first_free	stb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap
first_row_filter	stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
first_unicode_codepoint_in_range	stb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and this is the first codepoint$/;"	m	struct:__anon23
firstcode	stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon11
firstsymbol	stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon11
flags	fontstash.h	/^	unsigned char flags;$/;"	m	struct:FONSparams
flags	nanovg.c	/^	unsigned char flags;$/;"	m	struct:NVGpoint	file:
flags	nanovg_gl.h	/^	int flags;$/;"	m	struct:GLNVGcontext
flags	nanovg_gl.h	/^	int flags;$/;"	m	struct:GLNVGtexture
flags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
float2fixed	stb_image.h	/^#define float2fixed(/;"	d
fonsAddFallbackFont	fontstash.h	/^int fonsAddFallbackFont(FONScontext* stash, int base, int fallback)$/;"	f
fonsAddFont	fontstash.h	/^int fonsAddFont(FONScontext* stash, const char* name, const char* path)$/;"	f
fonsAddFontMem	fontstash.h	/^int fonsAddFontMem(FONScontext* stash, const char* name, unsigned char* data, int dataSize, int freeData)$/;"	f
fonsClearState	fontstash.h	/^void fonsClearState(FONScontext* stash)$/;"	f
fonsCreateInternal	fontstash.h	/^FONScontext* fonsCreateInternal(FONSparams* params)$/;"	f
fonsDeleteInternal	fontstash.h	/^void fonsDeleteInternal(FONScontext* stash)$/;"	f
fonsDrawDebug	fontstash.h	/^void fonsDrawDebug(FONScontext* stash, float x, float y)$/;"	f
fonsDrawText	fontstash.h	/^float fonsDrawText(FONScontext* stash,$/;"	f
fonsExpandAtlas	fontstash.h	/^int fonsExpandAtlas(FONScontext* stash, int width, int height)$/;"	f
fonsGetAtlasSize	fontstash.h	/^void fonsGetAtlasSize(FONScontext* stash, int* width, int* height)$/;"	f
fonsGetFontByName	fontstash.h	/^int fonsGetFontByName(FONScontext* s, const char* name)$/;"	f
fonsGetTextureData	fontstash.h	/^const unsigned char* fonsGetTextureData(FONScontext* stash, int* width, int* height)$/;"	f
fonsLineBounds	fontstash.h	/^void fonsLineBounds(FONScontext* stash, float y, float* miny, float* maxy)$/;"	f
fonsPopState	fontstash.h	/^void fonsPopState(FONScontext* stash)$/;"	f
fonsPushState	fontstash.h	/^void fonsPushState(FONScontext* stash)$/;"	f
fonsResetAtlas	fontstash.h	/^int fonsResetAtlas(FONScontext* stash, int width, int height)$/;"	f
fonsSetAlign	fontstash.h	/^void fonsSetAlign(FONScontext* stash, int align)$/;"	f
fonsSetBlur	fontstash.h	/^void fonsSetBlur(FONScontext* stash, float blur)$/;"	f
fonsSetColor	fontstash.h	/^void fonsSetColor(FONScontext* stash, unsigned int color)$/;"	f
fonsSetErrorCallback	fontstash.h	/^void fonsSetErrorCallback(FONScontext* stash, void (*callback)(void* uptr, int error, int val), void* uptr)$/;"	f
fonsSetFont	fontstash.h	/^void fonsSetFont(FONScontext* stash, int font)$/;"	f
fonsSetSize	fontstash.h	/^void fonsSetSize(FONScontext* stash, float size)$/;"	f
fonsSetSpacing	fontstash.h	/^void fonsSetSpacing(FONScontext* stash, float spacing)$/;"	f
fonsTextBounds	fontstash.h	/^float fonsTextBounds(FONScontext* stash,$/;"	f
fonsTextIterInit	fontstash.h	/^int fonsTextIterInit(FONScontext* stash, FONStextIter* iter,$/;"	f
fonsTextIterNext	fontstash.h	/^int fonsTextIterNext(FONScontext* stash, FONStextIter* iter, FONSquad* quad)$/;"	f
fonsValidateTexture	fontstash.h	/^int fonsValidateTexture(FONScontext* stash, int* dirty)$/;"	f
fonsVertMetrics	fontstash.h	/^void fonsVertMetrics(FONScontext* stash,$/;"	f
fons__addWhiteRect	fontstash.h	/^static void fons__addWhiteRect(FONScontext* stash, int w, int h)$/;"	f
fons__allocAtlas	fontstash.h	/^static FONSatlas* fons__allocAtlas(int w, int h, int nnodes)$/;"	f
fons__allocFont	fontstash.h	/^static int fons__allocFont(FONScontext* stash)$/;"	f
fons__allocGlyph	fontstash.h	/^static FONSglyph* fons__allocGlyph(FONSfont* font)$/;"	f
fons__atlasAddRect	fontstash.h	/^static int fons__atlasAddRect(FONSatlas* atlas, int rw, int rh, int* rx, int* ry)$/;"	f
fons__atlasAddSkylineLevel	fontstash.h	/^static int fons__atlasAddSkylineLevel(FONSatlas* atlas, int idx, int x, int y, int w, int h)$/;"	f
fons__atlasExpand	fontstash.h	/^static void fons__atlasExpand(FONSatlas* atlas, int w, int h)$/;"	f
fons__atlasInsertNode	fontstash.h	/^static int fons__atlasInsertNode(FONSatlas* atlas, int idx, int x, int y, int w)$/;"	f
fons__atlasRectFits	fontstash.h	/^static int fons__atlasRectFits(FONSatlas* atlas, int i, int w, int h)$/;"	f
fons__atlasRemoveNode	fontstash.h	/^static void fons__atlasRemoveNode(FONSatlas* atlas, int idx)$/;"	f
fons__atlasReset	fontstash.h	/^static void fons__atlasReset(FONSatlas* atlas, int w, int h)$/;"	f
fons__blur	fontstash.h	/^static void fons__blur(FONScontext* stash, unsigned char* dst, int w, int h, int dstStride, int blur)$/;"	f
fons__blurCols	fontstash.h	/^static void fons__blurCols(unsigned char* dst, int w, int h, int dstStride, int alpha)$/;"	f
fons__blurRows	fontstash.h	/^static void fons__blurRows(unsigned char* dst, int w, int h, int dstStride, int alpha)$/;"	f
fons__decutf8	fontstash.h	/^static unsigned int fons__decutf8(unsigned int* state, unsigned int* codep, unsigned int byte)$/;"	f
fons__deleteAtlas	fontstash.h	/^static void fons__deleteAtlas(FONSatlas* atlas)$/;"	f
fons__flush	fontstash.h	/^static void fons__flush(FONScontext* stash)$/;"	f
fons__freeFont	fontstash.h	/^static void fons__freeFont(FONSfont* font)$/;"	f
fons__getGlyph	fontstash.h	/^static FONSglyph* fons__getGlyph(FONScontext* stash, FONSfont* font, unsigned int codepoint,$/;"	f
fons__getQuad	fontstash.h	/^static void fons__getQuad(FONScontext* stash, FONSfont* font,$/;"	f
fons__getState	fontstash.h	/^static FONSstate* fons__getState(FONScontext* stash)$/;"	f
fons__getVertAlign	fontstash.h	/^static float fons__getVertAlign(FONScontext* stash, FONSfont* font, int align, short isize)$/;"	f
fons__hashint	fontstash.h	/^static unsigned int fons__hashint(unsigned int a)$/;"	f
fons__maxi	fontstash.h	/^static int fons__maxi(int a, int b)$/;"	f
fons__mini	fontstash.h	/^static int fons__mini(int a, int b)$/;"	f
fons__tmpalloc	fontstash.h	/^static void* fons__tmpalloc(size_t size, void* up)$/;"	f
fons__tmpfree	fontstash.h	/^static void fons__tmpfree(void* ptr, void* up)$/;"	f
fons__tt_buildGlyphBitmap	fontstash.h	/^int fons__tt_buildGlyphBitmap(FONSttFontImpl *font, int glyph, float size, float scale,$/;"	f
fons__tt_getFontVMetrics	fontstash.h	/^void fons__tt_getFontVMetrics(FONSttFontImpl *font, int *ascent, int *descent, int *lineGap)$/;"	f
fons__tt_getGlyphIndex	fontstash.h	/^int fons__tt_getGlyphIndex(FONSttFontImpl *font, int codepoint)$/;"	f
fons__tt_getGlyphKernAdvance	fontstash.h	/^int fons__tt_getGlyphKernAdvance(FONSttFontImpl *font, int glyph1, int glyph2)$/;"	f
fons__tt_getPixelHeightScale	fontstash.h	/^float fons__tt_getPixelHeightScale(FONSttFontImpl *font, float size)$/;"	f
fons__tt_init	fontstash.h	/^int fons__tt_init(FONScontext *context)$/;"	f
fons__tt_loadFont	fontstash.h	/^int fons__tt_loadFont(FONScontext *context, FONSttFontImpl *font, unsigned char *data, int dataSize)$/;"	f
fons__tt_renderGlyphBitmap	fontstash.h	/^void fons__tt_renderGlyphBitmap(FONSttFontImpl *font, unsigned char *output, int outWidth, int outHeight, int outStride,$/;"	f
fons__vertex	fontstash.h	/^static __inline void fons__vertex(FONScontext* stash, float x, float y, float s, float t, unsigned int c)$/;"	f
font	fontstash.h	/^	FONSttFontImpl font;$/;"	m	struct:FONSfont
font	fontstash.h	/^	FT_Face font;$/;"	m	struct:FONSttFontImpl
font	fontstash.h	/^	int font;$/;"	m	struct:FONSstate
font	fontstash.h	/^	stbtt_fontinfo font;$/;"	m	struct:FONSttFontImpl
font	fontstash.h	/^	struct FONSfont* font;$/;"	m	struct:FONStextIter	typeref:struct:FONStextIter::FONSfont
fontBlur	nanovg.c	/^	float fontBlur;$/;"	m	struct:NVGstate	file:
fontId	nanovg.c	/^	int fontId;$/;"	m	struct:NVGstate	file:
fontImageIdx	nanovg.c	/^	int fontImageIdx;$/;"	m	struct:NVGcontext	file:
fontImages	nanovg.c	/^	int fontImages[NVG_MAX_FONTIMAGES];$/;"	m	struct:NVGcontext	file:
fontSize	nanovg.c	/^	float fontSize;$/;"	m	struct:NVGstate	file:
font_size	stb_truetype.h	/^   float font_size;$/;"	m	struct:__anon23
fonts	fontstash.h	/^	FONSfont** fonts;$/;"	m	struct:FONScontext
fontstart	stb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo
frag	nanovg_gl.h	/^	GLuint frag;$/;"	m	struct:GLNVGshader
fragBuf	nanovg_gl.h	/^	GLuint fragBuf;$/;"	m	struct:GLNVGcontext
fragSize	nanovg_gl.h	/^	int fragSize;$/;"	m	struct:GLNVGcontext
freeData	fontstash.h	/^	unsigned char freeData;$/;"	m	struct:FONSfont
fringeWidth	nanovg.c	/^	float fringeWidth;$/;"	m	struct:NVGcontext	file:
fs	nanovg.c	/^	struct FONScontext* fs;$/;"	m	struct:NVGcontext	typeref:struct:NVGcontext::FONScontext	file:
ftLibrary	fontstash.h	/^static FT_Library ftLibrary;$/;"	v
ftex	stb_truetype.h	/^GLuint ftex;$/;"	v
fx	stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
g	nanovg.h	/^			float r,g,b,a;$/;"	m	struct:NVGcolor::__anon1::__anon2
glnvg__allocCall	nanovg_gl.h	/^static GLNVGcall* glnvg__allocCall(GLNVGcontext* gl)$/;"	f
glnvg__allocFragUniforms	nanovg_gl.h	/^static int glnvg__allocFragUniforms(GLNVGcontext* gl, int n)$/;"	f
glnvg__allocPaths	nanovg_gl.h	/^static int glnvg__allocPaths(GLNVGcontext* gl, int n)$/;"	f
glnvg__allocTexture	nanovg_gl.h	/^static GLNVGtexture* glnvg__allocTexture(GLNVGcontext* gl)$/;"	f
glnvg__allocVerts	nanovg_gl.h	/^static int glnvg__allocVerts(GLNVGcontext* gl, int n)$/;"	f
glnvg__bindTexture	nanovg_gl.h	/^static void glnvg__bindTexture(GLNVGcontext* gl, GLuint tex)$/;"	f
glnvg__blendCompositeOperation	nanovg_gl.h	/^static GLNVGblend glnvg__blendCompositeOperation(NVGcompositeOperationState op)$/;"	f
glnvg__blendFuncSeparate	nanovg_gl.h	/^static void glnvg__blendFuncSeparate(GLNVGcontext* gl, const GLNVGblend* blend)$/;"	f
glnvg__checkError	nanovg_gl.h	/^static void glnvg__checkError(GLNVGcontext* gl, const char* str)$/;"	f
glnvg__convertPaint	nanovg_gl.h	/^static int glnvg__convertPaint(GLNVGcontext* gl, GLNVGfragUniforms* frag, NVGpaint* paint,$/;"	f
glnvg__convexFill	nanovg_gl.h	/^static void glnvg__convexFill(GLNVGcontext* gl, GLNVGcall* call)$/;"	f
glnvg__createShader	nanovg_gl.h	/^static int glnvg__createShader(GLNVGshader* shader, const char* name, const char* header, const char* opts, const char* vshader, const char* fshader)$/;"	f
glnvg__deleteShader	nanovg_gl.h	/^static void glnvg__deleteShader(GLNVGshader* shader)$/;"	f
glnvg__deleteTexture	nanovg_gl.h	/^static int glnvg__deleteTexture(GLNVGcontext* gl, int id)$/;"	f
glnvg__dumpProgramError	nanovg_gl.h	/^static void glnvg__dumpProgramError(GLuint prog, const char* name)$/;"	f
glnvg__dumpShaderError	nanovg_gl.h	/^static void glnvg__dumpShaderError(GLuint shader, const char* name, const char* type)$/;"	f
glnvg__fill	nanovg_gl.h	/^static void glnvg__fill(GLNVGcontext* gl, GLNVGcall* call)$/;"	f
glnvg__findTexture	nanovg_gl.h	/^static GLNVGtexture* glnvg__findTexture(GLNVGcontext* gl, int id)$/;"	f
glnvg__getUniforms	nanovg_gl.h	/^static void glnvg__getUniforms(GLNVGshader* shader)$/;"	f
glnvg__maxVertCount	nanovg_gl.h	/^static int glnvg__maxVertCount(const NVGpath* paths, int npaths)$/;"	f
glnvg__maxi	nanovg_gl.h	/^static int glnvg__maxi(int a, int b) { return a > b ? a : b; }$/;"	f
glnvg__nearestPow2	nanovg_gl.h	/^static unsigned int glnvg__nearestPow2(unsigned int num)$/;"	f
glnvg__premulColor	nanovg_gl.h	/^static NVGcolor glnvg__premulColor(NVGcolor c)$/;"	f
glnvg__renderCancel	nanovg_gl.h	/^static void glnvg__renderCancel(void* uptr) {$/;"	f
glnvg__renderCreate	nanovg_gl.h	/^static int glnvg__renderCreate(void* uptr)$/;"	f
glnvg__renderCreateTexture	nanovg_gl.h	/^static int glnvg__renderCreateTexture(void* uptr, int type, int w, int h, int imageFlags, const unsigned char* data)$/;"	f
glnvg__renderDelete	nanovg_gl.h	/^static void glnvg__renderDelete(void* uptr)$/;"	f
glnvg__renderDeleteTexture	nanovg_gl.h	/^static int glnvg__renderDeleteTexture(void* uptr, int image)$/;"	f
glnvg__renderFill	nanovg_gl.h	/^static void glnvg__renderFill(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, float fringe,$/;"	f
glnvg__renderFlush	nanovg_gl.h	/^static void glnvg__renderFlush(void* uptr)$/;"	f
glnvg__renderGetTextureSize	nanovg_gl.h	/^static int glnvg__renderGetTextureSize(void* uptr, int image, int* w, int* h)$/;"	f
glnvg__renderStroke	nanovg_gl.h	/^static void glnvg__renderStroke(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, float fringe,$/;"	f
glnvg__renderTriangles	nanovg_gl.h	/^static void glnvg__renderTriangles(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor,$/;"	f
glnvg__renderUpdateTexture	nanovg_gl.h	/^static int glnvg__renderUpdateTexture(void* uptr, int image, int x, int y, int w, int h, const unsigned char* data)$/;"	f
glnvg__renderViewport	nanovg_gl.h	/^static void glnvg__renderViewport(void* uptr, int width, int height, float devicePixelRatio)$/;"	f
glnvg__setUniforms	nanovg_gl.h	/^static void glnvg__setUniforms(GLNVGcontext* gl, int uniformOffset, int image)$/;"	f
glnvg__stencilFunc	nanovg_gl.h	/^static void glnvg__stencilFunc(GLNVGcontext* gl, GLenum func, GLint ref, GLuint mask)$/;"	f
glnvg__stencilMask	nanovg_gl.h	/^static void glnvg__stencilMask(GLNVGcontext* gl, GLuint mask)$/;"	f
glnvg__stroke	nanovg_gl.h	/^static void glnvg__stroke(GLNVGcontext* gl, GLNVGcall* call)$/;"	f
glnvg__triangles	nanovg_gl.h	/^static void glnvg__triangles(GLNVGcontext* gl, GLNVGcall* call)$/;"	f
glnvg__vset	nanovg_gl.h	/^static void glnvg__vset(NVGvertex* vtx, float x, float y, float u, float v)$/;"	f
glnvg__xformToMat3x4	nanovg_gl.h	/^static void glnvg__xformToMat3x4(float* m3, float* t)$/;"	f
glnvg_convertBlendFuncFactor	nanovg_gl.h	/^static GLenum glnvg_convertBlendFuncFactor(int factor)$/;"	f
glyf	stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
glyphs	fontstash.h	/^	FONSglyph* glyphs;$/;"	m	struct:FONSfont
h	stb_image.h	/^      int h,v;$/;"	m	struct:__anon8::__anon9
h	stb_image.h	/^   int w,h;$/;"	m	struct:__anon19
h	stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
h	stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon26
h2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon8::__anon9
h_oversample	stb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon23
h_oversample	stb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
ha	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon8::__anon9
handleError	fontstash.h	/^	void (*handleError)(void* uptr, int error, int val);$/;"	m	struct:FONScontext
hd	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon8::__anon9
head	stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
head	stb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap::stbtt__hheap_chunk
height	fontstash.h	/^	int width, height;$/;"	m	struct:FONSatlas
height	fontstash.h	/^	int width, height;$/;"	m	struct:FONSparams
height	nanovg_gl.h	/^	int width, height;$/;"	m	struct:GLNVGtexture
height	stb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context
height	stb_truetype.h	/^   int width,height;$/;"	m	struct:__anon34
hhea	stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
hmtx	stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
hs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon10
hsz	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon16
huff_ac	stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon8
huff_dc	stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon8
iblur	fontstash.h	/^	short isize, iblur;$/;"	m	struct:FONStextIter
id	nanovg_gl.h	/^	int id;$/;"	m	struct:GLNVGtexture
id	stb_image.h	/^      int id;$/;"	m	struct:__anon8::__anon9
id	stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
idata	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon14
idct_block_kernel	stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon8
image	nanovg.h	/^	int image;$/;"	m	struct:NVGpaint
image	nanovg_gl.h	/^	int image;$/;"	m	struct:GLNVGcall
image	nanovg_gl_utils.h	/^	int image;$/;"	m	struct:NVGLUframebuffer
img_buffer	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon5
img_buffer_end	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon5
img_buffer_original	stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon5
img_buffer_original_end	stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon5
img_comp	stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon8	typeref:struct:__anon8::__anon9
img_h_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon8
img_mcu_h	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon8
img_mcu_w	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon8
img_mcu_x	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon8
img_mcu_y	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon8
img_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon5
img_out_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon5
img_v_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon8
img_x	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon5
img_y	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon5
index	fontstash.h	/^	int index;$/;"	m	struct:FONSglyph
indexToLocFormat	stb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo
index_map	stb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo
innerCol	nanovg_gl.h	/^		struct NVGcolor innerCol;$/;"	m	struct:GLNVGfragUniforms	typeref:struct:GLNVGfragUniforms::NVGcolor
innerColor	nanovg.h	/^	NVGcolor innerColor;$/;"	m	struct:NVGpaint
invert	stb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge
io	stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon5
io_user_data	stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon5
isize	fontstash.h	/^	short isize, iblur;$/;"	m	struct:FONStextIter
ith	fontstash.h	/^	float itw,ith;$/;"	m	struct:FONScontext
itw	fontstash.h	/^	float itw,ith;$/;"	m	struct:FONScontext
kern	stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
len	nanovg.c	/^	float len;$/;"	m	struct:NVGpoint	file:
length	stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon13
letterSpacing	nanovg.c	/^	float letterSpacing;$/;"	m	struct:NVGstate	file:
lflags	stb_image.h	/^   int lflags;$/;"	m	struct:__anon19
line0	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon10
line1	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon10
lineCap	nanovg.c	/^	int lineCap;$/;"	m	struct:NVGstate	file:
lineHeight	nanovg.c	/^	float lineHeight;$/;"	m	struct:NVGstate	file:
lineJoin	nanovg.c	/^	int lineJoin;$/;"	m	struct:NVGstate	file:
line_size	stb_image.h	/^   int line_size;$/;"	m	struct:__anon19
linebuf	stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon8::__anon9
lineh	fontstash.h	/^	float lineh;$/;"	m	struct:FONSfont
load_jpeg_image	stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
loc	nanovg_gl.h	/^	GLint loc[GLNVG_MAX_LOCS];$/;"	m	struct:GLNVGshader
loca	stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
lpal	stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon19
lut	fontstash.h	/^	int lut[FONS_HASH_LUT_SIZE];$/;"	m	struct:FONSfont
ma	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
main	stb_truetype.h	/^int main(int argc, char **argv)$/;"	f
marker	stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon8
max_x	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon19
max_y	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon19
maxcode	stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon11
maxcode	stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon7
maxx	nanovg.h	/^	float minx, maxx;	\/\/ Actual bounds of the row. Logical with and bounds can differ because of kerning and some parts over extending.$/;"	m	struct:NVGtextRow
maxx	nanovg.h	/^	float minx, maxx;	\/\/ The bounds of the glyph shape.$/;"	m	struct:NVGglyphPosition
mb	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
mg	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
minx	nanovg.h	/^	float minx, maxx;	\/\/ Actual bounds of the row. Logical with and bounds can differ because of kerning and some parts over extending.$/;"	m	struct:NVGtextRow
minx	nanovg.h	/^	float minx, maxx;	\/\/ The bounds of the glyph shape.$/;"	m	struct:NVGglyphPosition
miterLimit	nanovg.c	/^	float miterLimit;$/;"	m	struct:NVGstate	file:
mr	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
my_stbtt_initfont	stb_truetype.h	/^void my_stbtt_initfont(void)$/;"	f
my_stbtt_print	stb_truetype.h	/^void my_stbtt_print(float x, float y, char *text)$/;"	f
name	fontstash.h	/^	char name[64];$/;"	m	struct:FONSfont
nbevel	nanovg.h	/^	int nbevel;$/;"	m	struct:NVGpath
ncalls	nanovg_gl.h	/^	int ncalls;$/;"	m	struct:GLNVGcontext
ncommands	nanovg.c	/^	int ncommands;$/;"	m	struct:NVGcontext	file:
next	fontstash.h	/^	const char* next;$/;"	m	struct:FONStextIter
next	fontstash.h	/^	int next;$/;"	m	struct:FONSglyph
next	nanovg.h	/^	const char* next;	\/\/ Pointer to the beginning of the next row.$/;"	m	struct:NVGtextRow
next	stb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge::stbtt__active_edge
next	stb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk::stbtt__hheap_chunk
nextx	fontstash.h	/^	float x, y, nextx, nexty, scale, spacing;$/;"	m	struct:FONStextIter
nexty	fontstash.h	/^	float x, y, nextx, nexty, scale, spacing;$/;"	m	struct:FONStextIter
nfallbacks	fontstash.h	/^	int nfallbacks;$/;"	m	struct:FONSfont
nfill	nanovg.h	/^	int nfill;$/;"	m	struct:NVGpath
nfonts	fontstash.h	/^	int nfonts;$/;"	m	struct:FONScontext
nglyphs	fontstash.h	/^	int nglyphs;$/;"	m	struct:FONSfont
nnodes	fontstash.h	/^	int nnodes;$/;"	m	struct:FONSatlas
nodes	fontstash.h	/^	FONSatlasNode* nodes;$/;"	m	struct:FONSatlas
nodes	stb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context
nomore	stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon8
npaths	nanovg.c	/^	int npaths;$/;"	m	struct:NVGpathCache	file:
npaths	nanovg_gl.h	/^	int npaths;$/;"	m	struct:GLNVGcontext
npoints	nanovg.c	/^	int npoints;$/;"	m	struct:NVGpathCache	file:
nscratch	fontstash.h	/^	int nscratch;$/;"	m	struct:FONScontext
nstates	fontstash.h	/^	int nstates;$/;"	m	struct:FONScontext
nstates	nanovg.c	/^	int nstates;$/;"	m	struct:NVGcontext	file:
nstroke	nanovg.h	/^	int nstroke;$/;"	m	struct:NVGpath
ntextures	nanovg_gl.h	/^	int ntextures;$/;"	m	struct:GLNVGcontext
numGlyphs	stb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo
num_bits	stb_image.h	/^   int num_bits;$/;"	m	struct:__anon12
num_chars	stb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon23
num_remaining_in_head_chunk	stb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap
nuniforms	nanovg_gl.h	/^	int nuniforms;$/;"	m	struct:GLNVGcontext
nverts	fontstash.h	/^	int nverts;$/;"	m	struct:FONScontext
nverts	nanovg.c	/^	int nverts;$/;"	m	struct:NVGpathCache	file:
nverts	nanovg_gl.h	/^	int nverts;$/;"	m	struct:GLNVGcontext
nvgAddFallbackFont	nanovg.c	/^int nvgAddFallbackFont(NVGcontext* ctx, const char* baseFont, const char* fallbackFont)$/;"	f
nvgAddFallbackFontId	nanovg.c	/^int nvgAddFallbackFontId(NVGcontext* ctx, int baseFont, int fallbackFont)$/;"	f
nvgArc	nanovg.c	/^void nvgArc(NVGcontext* ctx, float cx, float cy, float r, float a0, float a1, int dir)$/;"	f
nvgArcTo	nanovg.c	/^void nvgArcTo(NVGcontext* ctx, float x1, float y1, float x2, float y2, float radius)$/;"	f
nvgBeginFrame	nanovg.c	/^void nvgBeginFrame(NVGcontext* ctx, int windowWidth, int windowHeight, float devicePixelRatio)$/;"	f
nvgBeginPath	nanovg.c	/^void nvgBeginPath(NVGcontext* ctx)$/;"	f
nvgBezierTo	nanovg.c	/^void nvgBezierTo(NVGcontext* ctx, float c1x, float c1y, float c2x, float c2y, float x, float y)$/;"	f
nvgBoxGradient	nanovg.c	/^NVGpaint nvgBoxGradient(NVGcontext* ctx,$/;"	f
nvgCancelFrame	nanovg.c	/^void nvgCancelFrame(NVGcontext* ctx)$/;"	f
nvgCircle	nanovg.c	/^void nvgCircle(NVGcontext* ctx, float cx, float cy, float r)$/;"	f
nvgClosePath	nanovg.c	/^void nvgClosePath(NVGcontext* ctx)$/;"	f
nvgCreateFont	nanovg.c	/^int nvgCreateFont(NVGcontext* ctx, const char* name, const char* path)$/;"	f
nvgCreateFontMem	nanovg.c	/^int nvgCreateFontMem(NVGcontext* ctx, const char* name, unsigned char* data, int ndata, int freeData)$/;"	f
nvgCreateGL2	nanovg_gl.h	/^NVGcontext* nvgCreateGL2(int flags)$/;"	f
nvgCreateImage	nanovg.c	/^int nvgCreateImage(NVGcontext* ctx, const char* filename, int imageFlags)$/;"	f
nvgCreateImageMem	nanovg.c	/^int nvgCreateImageMem(NVGcontext* ctx, int imageFlags, unsigned char* data, int ndata)$/;"	f
nvgCreateImageRGBA	nanovg.c	/^int nvgCreateImageRGBA(NVGcontext* ctx, int w, int h, int imageFlags, const unsigned char* data)$/;"	f
nvgCreateInternal	nanovg.c	/^NVGcontext* nvgCreateInternal(NVGparams* params)$/;"	f
nvgCurrentTransform	nanovg.c	/^void nvgCurrentTransform(NVGcontext* ctx, float* xform)$/;"	f
nvgDebugDumpPathCache	nanovg.c	/^void nvgDebugDumpPathCache(NVGcontext* ctx)$/;"	f
nvgDegToRad	nanovg.c	/^float nvgDegToRad(float deg)$/;"	f
nvgDeleteGL2	nanovg_gl.h	/^void nvgDeleteGL2(NVGcontext* ctx)$/;"	f
nvgDeleteImage	nanovg.c	/^void nvgDeleteImage(NVGcontext* ctx, int image)$/;"	f
nvgDeleteInternal	nanovg.c	/^void nvgDeleteInternal(NVGcontext* ctx)$/;"	f
nvgEllipse	nanovg.c	/^void nvgEllipse(NVGcontext* ctx, float cx, float cy, float rx, float ry)$/;"	f
nvgEndFrame	nanovg.c	/^void nvgEndFrame(NVGcontext* ctx)$/;"	f
nvgFill	nanovg.c	/^void nvgFill(NVGcontext* ctx)$/;"	f
nvgFillColor	nanovg.c	/^void nvgFillColor(NVGcontext* ctx, NVGcolor color)$/;"	f
nvgFillPaint	nanovg.c	/^void nvgFillPaint(NVGcontext* ctx, NVGpaint paint)$/;"	f
nvgFindFont	nanovg.c	/^int nvgFindFont(NVGcontext* ctx, const char* name)$/;"	f
nvgFontBlur	nanovg.c	/^void nvgFontBlur(NVGcontext* ctx, float blur)$/;"	f
nvgFontFace	nanovg.c	/^void nvgFontFace(NVGcontext* ctx, const char* font)$/;"	f
nvgFontFaceId	nanovg.c	/^void nvgFontFaceId(NVGcontext* ctx, int font)$/;"	f
nvgFontSize	nanovg.c	/^void nvgFontSize(NVGcontext* ctx, float size)$/;"	f
nvgGlobalAlpha	nanovg.c	/^void nvgGlobalAlpha(NVGcontext* ctx, float alpha)$/;"	f
nvgGlobalCompositeBlendFunc	nanovg.c	/^void nvgGlobalCompositeBlendFunc(NVGcontext* ctx, int sfactor, int dfactor)$/;"	f
nvgGlobalCompositeBlendFuncSeparate	nanovg.c	/^void nvgGlobalCompositeBlendFuncSeparate(NVGcontext* ctx, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)$/;"	f
nvgGlobalCompositeOperation	nanovg.c	/^void nvgGlobalCompositeOperation(NVGcontext* ctx, int op)$/;"	f
nvgHSL	nanovg.c	/^NVGcolor nvgHSL(float h, float s, float l)$/;"	f
nvgHSLA	nanovg.c	/^NVGcolor nvgHSLA(float h, float s, float l, unsigned char a)$/;"	f
nvgImagePattern	nanovg.c	/^NVGpaint nvgImagePattern(NVGcontext* ctx,$/;"	f
nvgImageSize	nanovg.c	/^void nvgImageSize(NVGcontext* ctx, int image, int* w, int* h)$/;"	f
nvgInternalParams	nanovg.c	/^NVGparams* nvgInternalParams(NVGcontext* ctx)$/;"	f
nvgIntersectScissor	nanovg.c	/^void nvgIntersectScissor(NVGcontext* ctx, float x, float y, float w, float h)$/;"	f
nvgLerpRGBA	nanovg.c	/^NVGcolor nvgLerpRGBA(NVGcolor c0, NVGcolor c1, float u)$/;"	f
nvgLineCap	nanovg.c	/^void nvgLineCap(NVGcontext* ctx, int cap)$/;"	f
nvgLineJoin	nanovg.c	/^void nvgLineJoin(NVGcontext* ctx, int join)$/;"	f
nvgLineTo	nanovg.c	/^void nvgLineTo(NVGcontext* ctx, float x, float y)$/;"	f
nvgLinearGradient	nanovg.c	/^NVGpaint nvgLinearGradient(NVGcontext* ctx,$/;"	f
nvgMiterLimit	nanovg.c	/^void nvgMiterLimit(NVGcontext* ctx, float limit)$/;"	f
nvgMoveTo	nanovg.c	/^void nvgMoveTo(NVGcontext* ctx, float x, float y)$/;"	f
nvgPathWinding	nanovg.c	/^void nvgPathWinding(NVGcontext* ctx, int dir)$/;"	f
nvgQuadTo	nanovg.c	/^void nvgQuadTo(NVGcontext* ctx, float cx, float cy, float x, float y)$/;"	f
nvgRGB	nanovg.c	/^NVGcolor nvgRGB(unsigned char r, unsigned char g, unsigned char b)$/;"	f
nvgRGBA	nanovg.c	/^NVGcolor nvgRGBA(unsigned char r, unsigned char g, unsigned char b, unsigned char a)$/;"	f
nvgRGBAf	nanovg.c	/^NVGcolor nvgRGBAf(float r, float g, float b, float a)$/;"	f
nvgRGBf	nanovg.c	/^NVGcolor nvgRGBf(float r, float g, float b)$/;"	f
nvgRadToDeg	nanovg.c	/^float nvgRadToDeg(float rad)$/;"	f
nvgRadialGradient	nanovg.c	/^NVGpaint nvgRadialGradient(NVGcontext* ctx,$/;"	f
nvgRect	nanovg.c	/^void nvgRect(NVGcontext* ctx, float x, float y, float w, float h)$/;"	f
nvgReset	nanovg.c	/^void nvgReset(NVGcontext* ctx)$/;"	f
nvgResetScissor	nanovg.c	/^void nvgResetScissor(NVGcontext* ctx)$/;"	f
nvgResetTransform	nanovg.c	/^void nvgResetTransform(NVGcontext* ctx)$/;"	f
nvgRestore	nanovg.c	/^void nvgRestore(NVGcontext* ctx)$/;"	f
nvgRotate	nanovg.c	/^void nvgRotate(NVGcontext* ctx, float angle)$/;"	f
nvgRoundedRect	nanovg.c	/^void nvgRoundedRect(NVGcontext* ctx, float x, float y, float w, float h, float r)$/;"	f
nvgRoundedRectVarying	nanovg.c	/^void nvgRoundedRectVarying(NVGcontext* ctx, float x, float y, float w, float h, float radTopLeft, float radTopRight, float radBottomRight, float radBottomLeft)$/;"	f
nvgSave	nanovg.c	/^void nvgSave(NVGcontext* ctx)$/;"	f
nvgScale	nanovg.c	/^void nvgScale(NVGcontext* ctx, float x, float y)$/;"	f
nvgScissor	nanovg.c	/^void nvgScissor(NVGcontext* ctx, float x, float y, float w, float h)$/;"	f
nvgShapeAntiAlias	nanovg.c	/^void nvgShapeAntiAlias(NVGcontext* ctx, int enabled)$/;"	f
nvgSkewX	nanovg.c	/^void nvgSkewX(NVGcontext* ctx, float angle)$/;"	f
nvgSkewY	nanovg.c	/^void nvgSkewY(NVGcontext* ctx, float angle)$/;"	f
nvgStroke	nanovg.c	/^void nvgStroke(NVGcontext* ctx)$/;"	f
nvgStrokeColor	nanovg.c	/^void nvgStrokeColor(NVGcontext* ctx, NVGcolor color)$/;"	f
nvgStrokePaint	nanovg.c	/^void nvgStrokePaint(NVGcontext* ctx, NVGpaint paint)$/;"	f
nvgStrokeWidth	nanovg.c	/^void nvgStrokeWidth(NVGcontext* ctx, float width)$/;"	f
nvgText	nanovg.c	/^float nvgText(NVGcontext* ctx, float x, float y, const char* string, const char* end)$/;"	f
nvgTextAlign	nanovg.c	/^void nvgTextAlign(NVGcontext* ctx, int align)$/;"	f
nvgTextBounds	nanovg.c	/^float nvgTextBounds(NVGcontext* ctx, float x, float y, const char* string, const char* end, float* bounds)$/;"	f
nvgTextBox	nanovg.c	/^void nvgTextBox(NVGcontext* ctx, float x, float y, float breakRowWidth, const char* string, const char* end)$/;"	f
nvgTextBoxBounds	nanovg.c	/^void nvgTextBoxBounds(NVGcontext* ctx, float x, float y, float breakRowWidth, const char* string, const char* end, float* bounds)$/;"	f
nvgTextBreakLines	nanovg.c	/^int nvgTextBreakLines(NVGcontext* ctx, const char* string, const char* end, float breakRowWidth, NVGtextRow* rows, int maxRows)$/;"	f
nvgTextGlyphPositions	nanovg.c	/^int nvgTextGlyphPositions(NVGcontext* ctx, float x, float y, const char* string, const char* end, NVGglyphPosition* positions, int maxPositions)$/;"	f
nvgTextLetterSpacing	nanovg.c	/^void nvgTextLetterSpacing(NVGcontext* ctx, float spacing)$/;"	f
nvgTextLineHeight	nanovg.c	/^void nvgTextLineHeight(NVGcontext* ctx, float lineHeight)$/;"	f
nvgTextMetrics	nanovg.c	/^void nvgTextMetrics(NVGcontext* ctx, float* ascender, float* descender, float* lineh)$/;"	f
nvgTransRGBA	nanovg.c	/^NVGcolor nvgTransRGBA(NVGcolor c, unsigned char a)$/;"	f
nvgTransRGBAf	nanovg.c	/^NVGcolor nvgTransRGBAf(NVGcolor c, float a)$/;"	f
nvgTransform	nanovg.c	/^void nvgTransform(NVGcontext* ctx, float a, float b, float c, float d, float e, float f)$/;"	f
nvgTransformIdentity	nanovg.c	/^void nvgTransformIdentity(float* t)$/;"	f
nvgTransformInverse	nanovg.c	/^int nvgTransformInverse(float* inv, const float* t)$/;"	f
nvgTransformMultiply	nanovg.c	/^void nvgTransformMultiply(float* t, const float* s)$/;"	f
nvgTransformPoint	nanovg.c	/^void nvgTransformPoint(float* dx, float* dy, const float* t, float sx, float sy)$/;"	f
nvgTransformPremultiply	nanovg.c	/^void nvgTransformPremultiply(float* t, const float* s)$/;"	f
nvgTransformRotate	nanovg.c	/^void nvgTransformRotate(float* t, float a)$/;"	f
nvgTransformScale	nanovg.c	/^void nvgTransformScale(float* t, float sx, float sy)$/;"	f
nvgTransformSkewX	nanovg.c	/^void nvgTransformSkewX(float* t, float a)$/;"	f
nvgTransformSkewY	nanovg.c	/^void nvgTransformSkewY(float* t, float a)$/;"	f
nvgTransformTranslate	nanovg.c	/^void nvgTransformTranslate(float* t, float tx, float ty)$/;"	f
nvgTranslate	nanovg.c	/^void nvgTranslate(NVGcontext* ctx, float x, float y)$/;"	f
nvgUpdateImage	nanovg.c	/^void nvgUpdateImage(NVGcontext* ctx, int image, const unsigned char* data)$/;"	f
nvg__absf	nanovg.c	/^static float nvg__absf(float a) { return a >= 0.0f ? a : -a; }$/;"	f	file:
nvg__acosf	nanovg.c	/^static float nvg__acosf(float a) { return acosf(a); }$/;"	f	file:
nvg__addPath	nanovg.c	/^static void nvg__addPath(NVGcontext* ctx)$/;"	f	file:
nvg__addPoint	nanovg.c	/^static void nvg__addPoint(NVGcontext* ctx, float x, float y, int flags)$/;"	f	file:
nvg__allocPathCache	nanovg.c	/^static NVGpathCache* nvg__allocPathCache(void)$/;"	f	file:
nvg__allocTempVerts	nanovg.c	/^static NVGvertex* nvg__allocTempVerts(NVGcontext* ctx, int nverts)$/;"	f	file:
nvg__allocTextAtlas	nanovg.c	/^static int nvg__allocTextAtlas(NVGcontext* ctx)$/;"	f	file:
nvg__appendCommands	nanovg.c	/^static void nvg__appendCommands(NVGcontext* ctx, float* vals, int nvals)$/;"	f	file:
nvg__atan2f	nanovg.c	/^static float nvg__atan2f(float a,float b) { return atan2f(a, b); }$/;"	f	file:
nvg__bevelJoin	nanovg.c	/^static NVGvertex* nvg__bevelJoin(NVGvertex* dst, NVGpoint* p0, NVGpoint* p1,$/;"	f	file:
nvg__buttCapEnd	nanovg.c	/^static NVGvertex* nvg__buttCapEnd(NVGvertex* dst, NVGpoint* p,$/;"	f	file:
nvg__buttCapStart	nanovg.c	/^static NVGvertex* nvg__buttCapStart(NVGvertex* dst, NVGpoint* p,$/;"	f	file:
nvg__calculateJoins	nanovg.c	/^static void nvg__calculateJoins(NVGcontext* ctx, float w, int lineJoin, float miterLimit)$/;"	f	file:
nvg__chooseBevel	nanovg.c	/^static void nvg__chooseBevel(int bevel, NVGpoint* p0, NVGpoint* p1, float w,$/;"	f	file:
nvg__clampf	nanovg.c	/^static float nvg__clampf(float a, float mn, float mx) { return a < mn ? mn : (a > mx ? mx : a); }$/;"	f	file:
nvg__clampi	nanovg.c	/^static int nvg__clampi(int a, int mn, int mx) { return a < mn ? mn : (a > mx ? mx : a); }$/;"	f	file:
nvg__clearPathCache	nanovg.c	/^static void nvg__clearPathCache(NVGcontext* ctx)$/;"	f	file:
nvg__closePath	nanovg.c	/^static void nvg__closePath(NVGcontext* ctx)$/;"	f	file:
nvg__compositeOperationState	nanovg.c	/^static NVGcompositeOperationState nvg__compositeOperationState(int op)$/;"	f	file:
nvg__cosf	nanovg.c	/^static float nvg__cosf(float a) { return cosf(a); }$/;"	f	file:
nvg__cross	nanovg.c	/^static float nvg__cross(float dx0, float dy0, float dx1, float dy1) { return dx1*dy0 - dx0*dy1; }$/;"	f	file:
nvg__curveDivs	nanovg.c	/^static int nvg__curveDivs(float r, float arc, float tol)$/;"	f	file:
nvg__deletePathCache	nanovg.c	/^static void nvg__deletePathCache(NVGpathCache* c)$/;"	f	file:
nvg__distPtSeg	nanovg.c	/^static float nvg__distPtSeg(float x, float y, float px, float py, float qx, float qy)$/;"	f	file:
nvg__expandFill	nanovg.c	/^static int nvg__expandFill(NVGcontext* ctx, float w, int lineJoin, float miterLimit)$/;"	f	file:
nvg__expandStroke	nanovg.c	/^static int nvg__expandStroke(NVGcontext* ctx, float w, int lineCap, int lineJoin, float miterLimit)$/;"	f	file:
nvg__flattenPaths	nanovg.c	/^static void nvg__flattenPaths(NVGcontext* ctx)$/;"	f	file:
nvg__flushTextTexture	nanovg.c	/^static void nvg__flushTextTexture(NVGcontext* ctx)$/;"	f	file:
nvg__fragUniformPtr	nanovg_gl.h	/^static GLNVGfragUniforms* nvg__fragUniformPtr(GLNVGcontext* gl, int i)$/;"	f
nvg__getAverageScale	nanovg.c	/^static float nvg__getAverageScale(float *t)$/;"	f	file:
nvg__getFontScale	nanovg.c	/^static float nvg__getFontScale(NVGstate* state)$/;"	f	file:
nvg__getState	nanovg.c	/^static NVGstate* nvg__getState(NVGcontext* ctx)$/;"	f	file:
nvg__hue	nanovg.c	/^static float nvg__hue(float h, float m1, float m2)$/;"	f	file:
nvg__isectRects	nanovg.c	/^static void nvg__isectRects(float* dst,$/;"	f	file:
nvg__lastPath	nanovg.c	/^static NVGpath* nvg__lastPath(NVGcontext* ctx)$/;"	f	file:
nvg__lastPoint	nanovg.c	/^static NVGpoint* nvg__lastPoint(NVGcontext* ctx)$/;"	f	file:
nvg__maxf	nanovg.c	/^static float nvg__maxf(float a, float b) { return a > b ? a : b; }$/;"	f	file:
nvg__maxi	nanovg.c	/^static int nvg__maxi(int a, int b) { return a > b ? a : b; }$/;"	f	file:
nvg__minf	nanovg.c	/^static float nvg__minf(float a, float b) { return a < b ? a : b; }$/;"	f	file:
nvg__mini	nanovg.c	/^static int nvg__mini(int a, int b) { return a < b ? a : b; }$/;"	f	file:
nvg__modf	nanovg.c	/^static float nvg__modf(float a, float b) { return fmodf(a, b); }$/;"	f	file:
nvg__normalize	nanovg.c	/^static float nvg__normalize(float *x, float* y)$/;"	f	file:
nvg__pathWinding	nanovg.c	/^static void nvg__pathWinding(NVGcontext* ctx, int winding)$/;"	f	file:
nvg__polyArea	nanovg.c	/^static float nvg__polyArea(NVGpoint* pts, int npts)$/;"	f	file:
nvg__polyReverse	nanovg.c	/^static void nvg__polyReverse(NVGpoint* pts, int npts)$/;"	f	file:
nvg__ptEquals	nanovg.c	/^static int nvg__ptEquals(float x1, float y1, float x2, float y2, float tol)$/;"	f	file:
nvg__quantize	nanovg.c	/^static float nvg__quantize(float a, float d)$/;"	f	file:
nvg__renderText	nanovg.c	/^static void nvg__renderText(NVGcontext* ctx, NVGvertex* verts, int nverts)$/;"	f	file:
nvg__roundCapEnd	nanovg.c	/^static NVGvertex* nvg__roundCapEnd(NVGvertex* dst, NVGpoint* p,$/;"	f	file:
nvg__roundCapStart	nanovg.c	/^static NVGvertex* nvg__roundCapStart(NVGvertex* dst, NVGpoint* p,$/;"	f	file:
nvg__roundJoin	nanovg.c	/^static NVGvertex* nvg__roundJoin(NVGvertex* dst, NVGpoint* p0, NVGpoint* p1,$/;"	f	file:
nvg__setDevicePixelRatio	nanovg.c	/^static void nvg__setDevicePixelRatio(NVGcontext* ctx, float ratio)$/;"	f	file:
nvg__setPaintColor	nanovg.c	/^static void nvg__setPaintColor(NVGpaint* p, NVGcolor color)$/;"	f	file:
nvg__signf	nanovg.c	/^static float nvg__signf(float a) { return a >= 0.0f ? 1.0f : -1.0f; }$/;"	f	file:
nvg__sinf	nanovg.c	/^static float nvg__sinf(float a) { return sinf(a); }$/;"	f	file:
nvg__sqrtf	nanovg.c	/^static float nvg__sqrtf(float a) { return sqrtf(a); }$/;"	f	file:
nvg__tanf	nanovg.c	/^static float nvg__tanf(float a) { return tanf(a); }$/;"	f	file:
nvg__tesselateBezier	nanovg.c	/^static void nvg__tesselateBezier(NVGcontext* ctx,$/;"	f	file:
nvg__triarea2	nanovg.c	/^static float nvg__triarea2(float ax, float ay, float bx, float by, float cx, float cy)$/;"	f	file:
nvg__vset	nanovg.c	/^static void nvg__vset(NVGvertex* vtx, float x, float y, float u, float v)$/;"	f	file:
nvglCreateImageFromHandleGL2	nanovg_gl.h	/^int nvglCreateImageFromHandleGL2(NVGcontext* ctx, GLuint textureId, int w, int h, int imageFlags)$/;"	f
nvglImageHandleGL2	nanovg_gl.h	/^GLuint nvglImageHandleGL2(NVGcontext* ctx, int image)$/;"	f
nvgluBindFramebuffer	nanovg_gl_utils.h	/^void nvgluBindFramebuffer(NVGLUframebuffer* fb)$/;"	f
nvgluCreateFramebuffer	nanovg_gl_utils.h	/^NVGLUframebuffer* nvgluCreateFramebuffer(NVGcontext* ctx, int w, int h, int imageFlags)$/;"	f
nvgluDeleteFramebuffer	nanovg_gl_utils.h	/^void nvgluDeleteFramebuffer(NVGLUframebuffer* fb)$/;"	f
offset	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon16
old_out	stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon19
order	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon8
out	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon14
out	stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon19
outerCol	nanovg_gl.h	/^		struct NVGcolor outerCol;$/;"	m	struct:GLNVGfragUniforms	typeref:struct:GLNVGfragUniforms::NVGcolor
outerColor	nanovg.h	/^	NVGcolor outerColor;$/;"	m	struct:NVGpaint
pack_info	stb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context
padding	stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon25
padding	stb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context
paintMat	nanovg_gl.h	/^		float paintMat[12];$/;"	m	struct:GLNVGfragUniforms
pal	stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon19
params	fontstash.h	/^	FONSparams params;$/;"	m	struct:FONScontext
params	nanovg.c	/^	NVGparams params;$/;"	m	struct:NVGcontext	file:
parse	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon19
pathCount	nanovg_gl.h	/^	int pathCount;$/;"	m	struct:GLNVGcall
pathOffset	nanovg_gl.h	/^	int pathOffset;$/;"	m	struct:GLNVGcall
paths	nanovg.c	/^	NVGpath* paths;$/;"	m	struct:NVGpathCache	file:
paths	nanovg_gl.h	/^	GLNVGpath* paths;$/;"	m	struct:GLNVGcontext
pixels	stb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon26
pixels	stb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context
points	nanovg.c	/^	NVGpoint* points;$/;"	m	struct:NVGpathCache	file:
prefix	stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon18
prevGlyphIndex	fontstash.h	/^	int prevGlyphIndex;$/;"	m	struct:FONStextIter
prog	nanovg_gl.h	/^	GLuint prog;$/;"	m	struct:GLNVGshader
progressive	stb_image.h	/^   int            progressive;$/;"	m	struct:__anon8
r	nanovg.h	/^			float r,g,b,a;$/;"	m	struct:NVGcolor::__anon1::__anon2
radius	nanovg.h	/^	float radius;$/;"	m	struct:NVGpaint
radius	nanovg_gl.h	/^		float radius;$/;"	m	struct:GLNVGfragUniforms
ratio	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
raw_coeff	stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon8::__anon9
raw_data	stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon8::__anon9
rbo	nanovg_gl_utils.h	/^	GLuint rbo;$/;"	m	struct:NVGLUframebuffer
read	stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon4
read_from_callbacks	stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon5
renderCancel	nanovg.h	/^	void (*renderCancel)(void* uptr);$/;"	m	struct:NVGparams
renderCreate	fontstash.h	/^	int (*renderCreate)(void* uptr, int width, int height);$/;"	m	struct:FONSparams
renderCreate	nanovg.h	/^	int (*renderCreate)(void* uptr);$/;"	m	struct:NVGparams
renderCreateTexture	nanovg.h	/^	int (*renderCreateTexture)(void* uptr, int type, int w, int h, int imageFlags, const unsigned char* data);$/;"	m	struct:NVGparams
renderDelete	fontstash.h	/^	void (*renderDelete)(void* uptr);$/;"	m	struct:FONSparams
renderDelete	nanovg.h	/^	void (*renderDelete)(void* uptr);$/;"	m	struct:NVGparams
renderDeleteTexture	nanovg.h	/^	int (*renderDeleteTexture)(void* uptr, int image);$/;"	m	struct:NVGparams
renderDraw	fontstash.h	/^	void (*renderDraw)(void* uptr, const float* verts, const float* tcoords, const unsigned int* colors, int nverts);$/;"	m	struct:FONSparams
renderFill	nanovg.h	/^	void (*renderFill)(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, float fringe, const float* bounds, const NVGpath* paths, int npaths);$/;"	m	struct:NVGparams
renderFlush	nanovg.h	/^	void (*renderFlush)(void* uptr);$/;"	m	struct:NVGparams
renderGetTextureSize	nanovg.h	/^	int (*renderGetTextureSize)(void* uptr, int image, int* w, int* h);$/;"	m	struct:NVGparams
renderResize	fontstash.h	/^	int (*renderResize)(void* uptr, int width, int height);$/;"	m	struct:FONSparams
renderStroke	nanovg.h	/^	void (*renderStroke)(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, float fringe, float strokeWidth, const NVGpath* paths, int npaths);$/;"	m	struct:NVGparams
renderTriangles	nanovg.h	/^	void (*renderTriangles)(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, const NVGvertex* verts, int nverts);$/;"	m	struct:NVGparams
renderUpdate	fontstash.h	/^	void (*renderUpdate)(void* uptr, int* rect, const unsigned char* data);$/;"	m	struct:FONSparams
renderUpdateTexture	nanovg.h	/^	int (*renderUpdateTexture)(void* uptr, int image, int x, int y, int w, int h, const unsigned char* data);$/;"	m	struct:NVGparams
renderViewport	nanovg.h	/^	void (*renderViewport)(void* uptr, int width, int height, float devicePixelRatio);$/;"	m	struct:NVGparams
resample	stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon10
resample_row_1	stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon8
restart_interval	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon8
rgba	nanovg.h	/^		float rgba[4];$/;"	m	union:NVGcolor::__anon1
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon14
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon8
s0	fontstash.h	/^	float x0,y0,s0,t0;$/;"	m	struct:FONSquad
s0	stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon21
s1	fontstash.h	/^	float x1,y1,s1,t1;$/;"	m	struct:FONSquad
s1	stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon21
scale	fontstash.h	/^	float x, y, nextx, nexty, scale, spacing;$/;"	m	struct:FONStextIter
scan_n	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon8
scissor	nanovg.c	/^	NVGscissor scissor;$/;"	m	struct:NVGstate	file:
scissorExt	nanovg_gl.h	/^		float scissorExt[2];$/;"	m	struct:GLNVGfragUniforms
scissorMat	nanovg_gl.h	/^		float scissorMat[12]; \/\/ matrices are actually 3 vec4s$/;"	m	struct:GLNVGfragUniforms
scissorScale	nanovg_gl.h	/^		float scissorScale[2];$/;"	m	struct:GLNVGfragUniforms
scratch	fontstash.h	/^	unsigned char* scratch;$/;"	m	struct:FONScontext
shader	nanovg_gl.h	/^	GLNVGshader shader;$/;"	m	struct:GLNVGcontext
shapeAntiAlias	nanovg.c	/^	int shapeAntiAlias;$/;"	m	struct:NVGstate	file:
size	fontstash.h	/^	float size;$/;"	m	struct:FONSstate
size	fontstash.h	/^	short size, blur;$/;"	m	struct:FONSglyph
size	stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon7
size	stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon11
size	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17
skip	stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon4
spacing	fontstash.h	/^	float spacing;$/;"	m	struct:FONSstate
spacing	fontstash.h	/^	float x, y, nextx, nexty, scale, spacing;$/;"	m	struct:FONStextIter
spec_end	stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon8
spec_start	stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon8
srcAlpha	nanovg.h	/^	int srcAlpha;$/;"	m	struct:NVGcompositeOperationState
srcAlpha	nanovg_gl.h	/^	GLenum srcAlpha;$/;"	m	struct:GLNVGblend
srcRGB	nanovg.h	/^	int srcRGB;$/;"	m	struct:NVGcompositeOperationState
srcRGB	nanovg_gl.h	/^	GLenum srcRGB;$/;"	m	struct:GLNVGblend
start	nanovg.h	/^	const char* start;	\/\/ Pointer to the input text where the row starts.$/;"	m	struct:NVGtextRow
start_x	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon19
start_y	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon19
states	fontstash.h	/^	FONSstate states[FONS_MAX_STATES];$/;"	m	struct:FONScontext
states	nanovg.c	/^	NVGstate states[NVG_MAX_STATES];$/;"	m	struct:NVGcontext	file:
stbi__DNL	stb_image.h	/^#define stbi__DNL(/;"	d
stbi__EOI	stb_image.h	/^#define stbi__EOI(/;"	d
stbi__SOF	stb_image.h	/^#define stbi__SOF(/;"	d
stbi__SOF_progressive	stb_image.h	/^#define stbi__SOF_progressive(/;"	d
stbi__SOI	stb_image.h	/^#define stbi__SOI(/;"	d
stbi__SOS	stb_image.h	/^#define stbi__SOS(/;"	d
stbi__YCbCr_to_RGB_row	stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__at_eof	stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__bmask	stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon16
stbi__bmp_info	stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__bmp_parse_header	stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_test	stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_y	stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__context	stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon5
stbi__convert_format	stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	stb_image.h	/^#define stbi__div16(/;"	d
stbi__div4	stb_image.h	/^#define stbi__div4(/;"	d
stbi__do_png	stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f
stbi__do_zlib	stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__err	stb_image.h	/^   #define stbi__err(/;"	d
stbi__err	stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__errpf	stb_image.h	/^#define stbi__errpf(/;"	d
stbi__errpuc	stb_image.h	/^#define stbi__errpuc(/;"	d
stbi__expand_png_palette	stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	stb_image.h	/^#define stbi__f2f(/;"	d
stbi__fill_bits	stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1)$/;"	f
stbi__float2int	stb_image.h	/^#define stbi__float2int(/;"	d
stbi__float_postprocess	stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__fsh	stb_image.h	/^#define stbi__fsh(/;"	d
stbi__g_failure_reason	stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon19
stbi__gif_header	stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__gif_load_next	stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon18
stbi__gif_parse_colortable	stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__hdr_test	stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f
stbi__hdr_to_ldr	stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon7
stbi__idct_block	stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__init_zdefaults	stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f
stbi__int16	stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon8
stbi__jpeg_decode_block	stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi_uc *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi_uc *dequant)$/;"	f
stbi__jpeg_dezigzag	stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__jpeg_reset	stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_flip	stb_image.h	/^static unsigned char *stbi__load_flip(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_main	stb_image.h	/^static unsigned char *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__loadf_main	stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__malloc	stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__out_gif_code	stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncomperssed_block	stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f
stbi__pic_load_core	stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon17
stbi__pic_test	stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon14
stbi__png_info	stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__png_test	stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon13
stbi__pnm_getinteger	stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__pnm_skip_whitespace	stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_info	stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__psd_test	stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon10
stbi__resample_row_generic	stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__rewind	stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	stb_image.h	/^static int stbi__sse2_available()$/;"	f
stbi__start_callbacks	stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__stdio_callbacks	stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__tga_get_comp	stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__tga_read_rgb16	stb_image.h	/^void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertically_flip_on_load	stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__zbuf	stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon12
stbi__zbuild_huffman	stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon11
stbi__zhuffman_decode	stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	stb_image.h	/^   #define stbi_inline /;"	d
stbi_inline	stb_image.h	/^   #define stbi_inline$/;"	d
stbi_io_callbacks	stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon4
stbi_is_hdr	stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_callbacks	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	stb_image.h	/^   #define stbi_lrot(/;"	d
stbi_set_flip_vertically_on_load	stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_zlib_decode_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbrp_context	stb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon34
stbrp_coord	stb_truetype.h	/^typedef int stbrp_coord;$/;"	t
stbrp_init_target	stb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_node	stb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon35
stbrp_pack_rects	stb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_rect	stb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	stb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbtt_BakeFontBitmap	stb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,  \/\/ font location (use offset=0 for plain .ttf)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian	stb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2) $/;"	f
stbtt_FindGlyphIndex	stb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f
stbtt_FindMatchingFont	stb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *font_collection, const char *name_utf8, stbtt_int32 flags)$/;"	f
stbtt_FlattenCurves	stb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)$/;"	f
stbtt_FreeBitmap	stb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeShape	stb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f
stbtt_GetBakedQuad	stb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)$/;"	f
stbtt_GetCodepointBitmap	stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBitmapBox	stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapBoxSubpixel	stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapSubpixel	stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBox	stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetCodepointHMetrics	stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetCodepointKernAdvance	stb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f
stbtt_GetCodepointShape	stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)$/;"	f
stbtt_GetFontBoundingBox	stb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetFontNameString	stb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)$/;"	f
stbtt_GetFontOffsetForIndex	stb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *font_collection, int index)$/;"	f
stbtt_GetFontVMetrics	stb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)$/;"	f
stbtt_GetGlyphBitmap	stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBitmapBox	stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapBoxSubpixel	stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapSubpixel	stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBox	stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetGlyphHMetrics	stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetGlyphKernAdvance	stb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt_GetGlyphShape	stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt_GetPackedQuad	stb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(stbtt_packedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int align_to_integer)$/;"	f
stbtt_InitFont	stb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data2, int fontstart)$/;"	f
stbtt_IsGlyphEmpty	stb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt_MakeCodepointBitmap	stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixel	stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)$/;"	f
stbtt_MakeGlyphBitmap	stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixel	stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)$/;"	f
stbtt_PackBegin	stb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)$/;"	f
stbtt_PackEnd	stb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f
stbtt_PackFontRange	stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, unsigned char *fontdata, int font_index, float font_size,$/;"	f
stbtt_PackFontRanges	stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, unsigned char *fontdata, int font_index, stbtt_pack_range *ranges, int num_ranges)$/;"	f
stbtt_PackFontRangesGatherRects	stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackFontRangesPackRects	stb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num_rects)$/;"	f
stbtt_PackFontRangesRenderIntoRects	stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackSetOversampling	stb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, unsigned int v_oversample)$/;"	f
stbtt_Rasterize	stb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)$/;"	f
stbtt_ScaleForMappingEmToPixels	stb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f
stbtt_ScaleForPixelHeight	stb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f
stbtt__CompareUTF8toUTF16_bigendian_prefix	stb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(const stbtt_uint8 *s1, stbtt_int32 len1, const stbtt_uint8 *s2, stbtt_int32 len2) $/;"	f
stbtt__GetGlyfOffset	stb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__active_edge	stb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	stb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	stb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f
stbtt__bitmap	stb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon26
stbtt__check_size16	stb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t
stbtt__check_size32	stb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t
stbtt__close_shape	stb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_off,$/;"	f
stbtt__edge	stb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	stb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	stb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, int max_weight)$/;"	f
stbtt__fill_active_edges_new	stb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__active_edge *e, float y_top)$/;"	f
stbtt__find_table	stb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag)$/;"	f
stbtt__h_prefilter	stb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt__handle_clipped_edge	stb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, float y0, float x1, float y1)$/;"	f
stbtt__hheap	stb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	stb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	stb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f
stbtt__hheap_chunk	stb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	stb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	stb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f
stbtt__hheap_free	stb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f
stbtt__isfont	stb_truetype.h	/^static int stbtt__isfont(const stbtt_uint8 *font)$/;"	f
stbtt__matches	stb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 flags)$/;"	f
stbtt__matchpair	stb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nlen, stbtt_int32 target_id, stbtt_int32 next_id)$/;"	f
stbtt__new_active	stb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float start_point, void *userdata)$/;"	f
stbtt__oversample_shift	stb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f
stbtt__point	stb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon33
stbtt__rasterize	stb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings, float scale_x, float scale_y, float shift_x, float shift_y, int off_x, int off_y, int invert, void *userdata)$/;"	f
stbtt__rasterize_sorted_edges	stb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsubsample, int off_x, int off_y, void *userdata)$/;"	f
stbtt__sort_edges	stb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_ins_sort	stb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_quicksort	stb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f
stbtt__tesselate_curve	stb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float objspace_flatness_squared, int n)$/;"	f
stbtt__test_oversample_pow2	stb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ? 1 : -1];$/;"	t
stbtt__v_prefilter	stb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt_aligned_quad	stb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon21
stbtt_bakedchar	stb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon20
stbtt_fontinfo	stb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_fontinfo	stb_truetype.h	/^typedef struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	stb_truetype.h	/^} stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	stb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t
stbtt_int32	stb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t
stbtt_int8	stb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t
stbtt_pack_context	stb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	stb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	stb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon23
stbtt_packedchar	stb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon22
stbtt_setvertex	stb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy)$/;"	f
stbtt_tag	stb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	stb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	stb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t
stbtt_uint32	stb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t
stbtt_uint8	stb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t
stbtt_vertex	stb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon25
stbtt_vertex_type	stb_truetype.h	/^   #define stbtt_vertex_type /;"	d
stencilFunc	nanovg_gl.h	/^	GLenum stencilFunc;$/;"	m	struct:GLNVGcontext
stencilFuncMask	nanovg_gl.h	/^	GLuint stencilFuncMask;$/;"	m	struct:GLNVGcontext
stencilFuncRef	nanovg_gl.h	/^	GLint stencilFuncRef;$/;"	m	struct:GLNVGcontext
stencilMask	nanovg_gl.h	/^	GLuint stencilMask;$/;"	m	struct:GLNVGcontext
step	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon19
str	fontstash.h	/^	const char* str;$/;"	m	struct:FONStextIter
str	nanovg.h	/^	const char* str;	\/\/ Position of the glyph in the input string.$/;"	m	struct:NVGglyphPosition
stride	stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon26
stride_in_bytes	stb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context
stroke	nanovg.c	/^	NVGpaint stroke;$/;"	m	struct:NVGstate	file:
stroke	nanovg.h	/^	NVGvertex* stroke;$/;"	m	struct:NVGpath
strokeCount	nanovg_gl.h	/^	int strokeCount;$/;"	m	struct:GLNVGpath
strokeMult	nanovg_gl.h	/^		float strokeMult;$/;"	m	struct:GLNVGfragUniforms
strokeOffset	nanovg_gl.h	/^	int strokeOffset;$/;"	m	struct:GLNVGpath
strokeThr	nanovg_gl.h	/^		float strokeThr;$/;"	m	struct:GLNVGfragUniforms
strokeTriCount	nanovg.c	/^	int strokeTriCount;$/;"	m	struct:NVGcontext	file:
strokeWidth	nanovg.c	/^	float strokeWidth;$/;"	m	struct:NVGstate	file:
succ_high	stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon8
succ_low	stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon8
suffix	stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon18
sy	stb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge
t0	fontstash.h	/^	float x0,y0,s0,t0;$/;"	m	struct:FONSquad
t0	stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon21
t1	fontstash.h	/^	float x1,y1,s1,t1;$/;"	m	struct:FONSquad
t1	stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon21
tcoords	fontstash.h	/^	float tcoords[FONS_VERTEX_COUNT*2];$/;"	m	struct:FONScontext
temp_bitmap	stb_truetype.h	/^unsigned char temp_bitmap[512*512];$/;"	v
tessTol	nanovg.c	/^	float tessTol;$/;"	m	struct:NVGcontext	file:
tex	nanovg_gl.h	/^	GLuint tex;$/;"	m	struct:GLNVGtexture
texData	fontstash.h	/^	unsigned char* texData;$/;"	m	struct:FONScontext
texType	nanovg_gl.h	/^		int texType;$/;"	m	struct:GLNVGfragUniforms
textAlign	nanovg.c	/^	int textAlign;$/;"	m	struct:NVGstate	file:
textTriCount	nanovg.c	/^	int textTriCount;$/;"	m	struct:NVGcontext	file:
texture	nanovg_gl_utils.h	/^	GLuint texture;$/;"	m	struct:NVGLUframebuffer
textureId	nanovg_gl.h	/^	int textureId;$/;"	m	struct:GLNVGcontext
textures	nanovg_gl.h	/^	GLNVGtexture* textures;$/;"	m	struct:GLNVGcontext
todo	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon8
tq	stb_image.h	/^      int tq;$/;"	m	struct:__anon8::__anon9
transparent	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
triangleCount	nanovg_gl.h	/^	int triangleCount;$/;"	m	struct:GLNVGcall
triangleOffset	nanovg_gl.h	/^	int triangleOffset;$/;"	m	struct:GLNVGcall
ttBYTE	stb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	stb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	stb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	stb_truetype.h	/^   #define ttLONG(/;"	d
ttLONG	stb_truetype.h	/^   static stbtt_int32 ttLONG(const stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttSHORT	stb_truetype.h	/^   #define ttSHORT(/;"	d
ttSHORT	stb_truetype.h	/^   static stbtt_int16 ttSHORT(const stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f
ttULONG	stb_truetype.h	/^   #define ttULONG(/;"	d
ttULONG	stb_truetype.h	/^   static stbtt_uint32 ttULONG(const stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttUSHORT	stb_truetype.h	/^   #define ttUSHORT(/;"	d
ttUSHORT	stb_truetype.h	/^   static stbtt_uint16 ttUSHORT(const stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f
ttf_buffer	stb_truetype.h	/^char ttf_buffer[1<<25];$/;"	v
ttf_buffer	stb_truetype.h	/^unsigned char ttf_buffer[1<<20];$/;"	v
type	nanovg_gl.h	/^		int type;$/;"	m	struct:GLNVGfragUniforms
type	nanovg_gl.h	/^	int type;$/;"	m	struct:GLNVGcall
type	nanovg_gl.h	/^	int type;$/;"	m	struct:GLNVGtexture
type	stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon13
type	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17
type	stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon25
u	nanovg.h	/^	float x,y,u,v;$/;"	m	struct:NVGvertex
uniformOffset	nanovg_gl.h	/^	int uniformOffset;$/;"	m	struct:GLNVGcall
uniforms	nanovg_gl.h	/^	unsigned char* uniforms;$/;"	m	struct:GLNVGcontext
userPtr	fontstash.h	/^	void* userPtr;$/;"	m	struct:FONSparams
userPtr	nanovg.h	/^	void* userPtr;$/;"	m	struct:NVGparams
user_allocator_context	stb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context
userdata	stb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo
utf8state	fontstash.h	/^	unsigned int utf8state;$/;"	m	struct:FONStextIter
v	nanovg.h	/^	float x,y,u,v;$/;"	m	struct:NVGvertex
v	stb_image.h	/^      int h,v;$/;"	m	struct:__anon8::__anon9
v_oversample	stb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon23
v_oversample	stb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
validate_uint32	stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon11
values	stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon7
vert	nanovg_gl.h	/^	GLuint vert;$/;"	m	struct:GLNVGshader
vertArr	nanovg_gl.h	/^	GLuint vertArr;$/;"	m	struct:GLNVGcontext
vertBuf	nanovg_gl.h	/^	GLuint vertBuf;$/;"	m	struct:GLNVGcontext
verts	fontstash.h	/^	float verts[FONS_VERTEX_COUNT*2];$/;"	m	struct:FONScontext
verts	nanovg.c	/^	NVGvertex* verts;$/;"	m	struct:NVGpathCache	file:
verts	nanovg_gl.h	/^	struct NVGvertex* verts;$/;"	m	struct:GLNVGcontext	typeref:struct:GLNVGcontext::NVGvertex
view	nanovg_gl.h	/^	float view[2];$/;"	m	struct:GLNVGcontext
vs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon10
w	stb_image.h	/^   int w,h;$/;"	m	struct:__anon19
w	stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
w	stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon26
w2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon8::__anon9
w_lores	stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon10
was_packed	stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
width	fontstash.h	/^	int width, height;$/;"	m	struct:FONSatlas
width	fontstash.h	/^	int width, height;$/;"	m	struct:FONSparams
width	fontstash.h	/^    short x, y, width;$/;"	m	struct:FONSatlasNode
width	nanovg.h	/^	float width;		\/\/ Logical width of the row.$/;"	m	struct:NVGtextRow
width	nanovg_gl.h	/^	int width, height;$/;"	m	struct:GLNVGtexture
width	stb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context
width	stb_truetype.h	/^   int width,height;$/;"	m	struct:__anon34
winding	nanovg.h	/^	int winding;$/;"	m	struct:NVGpath
x	fontstash.h	/^	float x, y, nextx, nexty, scale, spacing;$/;"	m	struct:FONStextIter
x	fontstash.h	/^    short x, y, width;$/;"	m	struct:FONSatlasNode
x	nanovg.c	/^	float x,y;$/;"	m	struct:NVGpoint	file:
x	nanovg.h	/^	float x,y,u,v;$/;"	m	struct:NVGvertex
x	nanovg.h	/^	float x;			\/\/ The x-coordinate of the logical glyph position.$/;"	m	struct:NVGglyphPosition
x	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon8::__anon9
x	stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon25
x	stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon33
x	stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
x	stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon34
x	stb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
x	stb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon35
x0	fontstash.h	/^	float x0,y0,s0,t0;$/;"	m	struct:FONSquad
x0	fontstash.h	/^	short x0,y0,x1,y1;$/;"	m	struct:FONSglyph
x0	stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x0	stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon21
x0	stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon20
x0	stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon22
x1	fontstash.h	/^	float x1,y1,s1,t1;$/;"	m	struct:FONSquad
x1	fontstash.h	/^	short x0,y0,x1,y1;$/;"	m	struct:FONSglyph
x1	stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x1	stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon21
x1	stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon20
x1	stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon22
xadv	fontstash.h	/^	short xadv,xoff,yoff;$/;"	m	struct:FONSglyph
xadvance	stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon20
xadvance	stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon22
xform	nanovg.c	/^	float xform[6];$/;"	m	struct:NVGstate	file:
xform	nanovg.h	/^	float xform[6];$/;"	m	struct:NVGpaint
xform	nanovg.h	/^	float xform[6];$/;"	m	struct:NVGscissor
xoff	fontstash.h	/^	short xadv,xoff,yoff;$/;"	m	struct:FONSglyph
xoff	stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon20
xoff	stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon22
xoff2	stb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon22
y	fontstash.h	/^	float x, y, nextx, nexty, scale, spacing;$/;"	m	struct:FONStextIter
y	fontstash.h	/^    short x, y, width;$/;"	m	struct:FONSatlasNode
y	nanovg.c	/^	float x,y;$/;"	m	struct:NVGpoint	file:
y	nanovg.h	/^	float x,y,u,v;$/;"	m	struct:NVGvertex
y	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon8::__anon9
y	stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon25
y	stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon33
y	stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon34
y	stb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
y0	fontstash.h	/^	float x0,y0,s0,t0;$/;"	m	struct:FONSquad
y0	fontstash.h	/^	short x0,y0,x1,y1;$/;"	m	struct:FONSglyph
y0	stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y0	stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon21
y0	stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon20
y0	stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon22
y1	fontstash.h	/^	float x1,y1,s1,t1;$/;"	m	struct:FONSquad
y1	fontstash.h	/^	short x0,y0,x1,y1;$/;"	m	struct:FONSglyph
y1	stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y1	stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon21
y1	stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon20
y1	stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon22
yoff	fontstash.h	/^	short xadv,xoff,yoff;$/;"	m	struct:FONSglyph
yoff	stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon20
yoff	stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon22
yoff2	stb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon22
ypos	stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon10
ystep	stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon10
z_distance	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon12
z_expandable	stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon12
z_length	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon12
zbuffer	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon12
zbuffer_end	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon12
zout	stb_image.h	/^   char *zout;$/;"	m	struct:__anon12
zout_end	stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon12
zout_start	stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon12
